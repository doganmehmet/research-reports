{"title":"Market Research","markdown":{"yaml":{"title":"Market Research","format":{"html":{"embed-resources":true}}},"headingText":"import libraries","containsRefs":false,"markdown":"\n\n```{python}\n#| echo: false\n#| include: false\nimport pandas_datareader.data as web\nimport pandas as pd\nimport yfinance as yf\nfrom datetime import date\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mticker\nfrom matplotlib.ticker import FuncFormatter, PercentFormatter, MultipleLocator\n```\n\n```{python}\n#| echo: false\n#| include: false\n# IMPORT ALL DATA SETS\n\n# MSCI World Equity Index\nmsci = yf.download(\"^990100-USD-STRD\", start=\"1900-01-01\", interval=\"1mo\", auto_adjust=True)['Close']\nmsci.rename(columns={\"^990100-USD-STRD\":\"msci\"}, inplace=True)\nmsci.index = msci.index.to_period('M')\n\n\n#### Inflation\n# monthly YoY US inflation\n# https://fred.stlouisfed.org/series/CPIAUCSL\n# https://tradingeconomics.com/united-states/inflation-cpi\n\ninflation = web.get_data_fred([\"CPIAUCSL\", \"CPILFESL\"], start=\"1900-01-01\")\ninflation.rename(columns= {\"CPIAUCSL\":\"cpi\", \"CPILFESL\":\"core_cpi\"}, inplace=True)\ninflation = inflation.pct_change(12)*100\ninflation = inflation.round(1)\ninflation.index = inflation.index.to_period('M')\n\n\n# GDP (Real)\n# https://fred.stlouisfed.org/series/GDPC1\n    # compounded annual rate of change: [t/t(-1)]^4 -1  \n# https://www.bea.gov/data/gdp/gross-domestic-product\n\ngdp = web.get_data_fred(\"GDPC1\", start=\"1900-01-01\")\ngdp.rename(columns= {\"GDPC1\":\"gdp\"}, inplace=True)\n\ngdp = ((gdp / gdp.shift(1))**4 - 1)*100\ngdp.dropna(inplace=True)\ngdp.index = gdp.index.to_period('Q')\ngdp = gdp.round(1)\n\n# Household debt\n#  Household Debt Service Payments as a Percent of Disposable Personal Income (TDSP)\n#  Seasonally adjusted\nhdebt = web.get_data_fred(\"TDSP\", start = \"1900-01-01\")\nhdebt.index = hdebt.index.to_period('Q')\n\n\n# UNEMPLOYMENT\n# https://fred.stlouisfed.org/series/UNRATE\nunemployment = web.get_data_fred(\"UNRATE\", start = \"1900-01-01\")\nunemployment.index = unemployment.index.to_period('M')\n\n\n# FED B/S Assets\n# https://fred.stlouisfed.org/series/WALCL#\n# frequency monthly, aggregation method: Average\n\n# Download WALCL directly from FRED\nfed_assets = web.get_data_fred(\"WALCL\", start=\"1900-01-01\")\nfed_assets = fed_assets.resample('M').mean()\n\nfed_assets.index = fed_assets.index.to_period('M')\n\n# SP500, Nasdaq 100, Dow Jones  \ntickers = [\"^GSPC\", \"^NDX\", \"^DJI\"]\nstock_data = yf.download(tickers, start=\"1900-01-01\", interval=\"1mo\", auto_adjust=True)['Close']\nstock_data.index = stock_data.index.to_period('M').to_timestamp('M') # the last index value should ideally be adjusted to today or some last business day\nstock_data.rename(columns= {\"^GSPC\":\"SP500\",\n                                \"^NDX\":\"NDX\",\n                                \"^DJI\": \"DJI\"}, inplace=True)\n\n\n# SP500 P/E Ratio\ndef fetch_multpl_pe_by_month():\n    url = \"https://www.multpl.com/s-p-500-pe-ratio/table/by-month\"\n    tables = pd.read_html(url)\n    df = tables[0]\n    df.columns = [\"date\", \"pe\"]\n    \n    # Clean PE column: remove non-numeric characters\n    df[\"pe\"] = df[\"pe\"].astype(str).str.replace(r\"[^0-9\\.\\-]\", \"\", regex=True)\n    df[\"pe\"] = pd.to_numeric(df[\"pe\"], errors=\"coerce\")\n    \n    # Convert Date to datetime\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df[\"YearMonth\"] = df[\"date\"].dt.to_period(\"M\")\n    df = df.sort_values(\"date\").drop_duplicates(\"YearMonth\", keep=\"last\")\n    \n    # Drop helper column\n    df = df.drop(columns=[\"YearMonth\"]).reset_index(drop=True)\n    \n    \n    return df\n\npe = fetch_multpl_pe_by_month()\n\npe = pe.set_index(\"date\")\npe.index = pe.index.to_period('M')\n\n# VIX: CBOE volatility index\nvix = yf.download(\"^VIX\", start=\"1900-01-01\", interval=\"1d\", auto_adjust=True)['Close']\nvix = vix.resample('M').mean()\nvix.index = vix.index.to_period('M')\nvix.rename(columns= {\"^VIX\":\"VIX\"}, inplace=True)\n\n# FED TARGET RATE\n# https://fred.stlouisfed.org/series/DFEDTARU\nfedTargetRate = web.get_data_fred('DFEDTARU', start=\"2008-12-16\")\nfedTargetRate.rename(columns={'DFEDTARU':'fed_target_rate'}, inplace=True)\nfedTargetRate['change'] = fedTargetRate['fed_target_rate'].diff()\nfedTargetRate.dropna(inplace=True)\nfedTargetRateChange = fedTargetRate[fedTargetRate['change'] != 0]\n\n\n# US 2Y vs 10Y yields\n# Get 2Y and 10Y Treasury Yields from FRED\nusYields = web.get_data_fred([\"DGS2\", \"DGS10\"], start=\"1976-06-01\")\nusYields = usYields.dropna()\n\nusYields_monthly = usYields.resample('M').mean()\n\n# usYields[\"SR-LR\"] = usYields[\"DGS2\"] - usYields[\"DGS10\"]\n\nusYields_monthly.index = usYields_monthly.index.to_period('M')\n# usYields_monthly[\"SR-LR\"] = usYields_monthly[\"DGS2\"] - usYields_monthly[\"DGS10\"]\n\n\n# U.S. Recessions\n# https://fred.stlouisfed.org/series/JHDUSRGDPBR\nrecessions = web.get_data_fred(\"JHDUSRGDPBR\", start=\"1900-01-01\")\nrecessions.rename(columns={\"JHDUSRGDPBR\": \"recession\"}, inplace=True)\nrecessions.index = recessions.index.to_period('Q')\n\n# Convert each dataframe to its own JSON string\n# orient='records' creates a clean list of objects\n# indent=2 adds nice formatting for readability\n# monthly_msci_json = monthly_msci.to_json(orient='records', indent=2)\n# inflation_json = inflation.to_json(orient='records', indent=2)\n# gdp_json = gdp.to_json(orient='records', indent=2)\n# stock_data_monthly_json = stock_data_monthly.to_json(orient='records', indent=2)\n# fed_assets_json = fed_assets.to_json(orient='records', indent=2)\n# hdebt_json = hdebt.to_json(orient='records', indent=2)\n\n# we convert the index when creating dictionary\nall_data = {\n    \"inflation\": {str(k): v for k, v in inflation.to_dict(orient=\"index\").items()},\n    \"unemployment\": {str(k): v for k, v in unemployment.to_dict(orient=\"index\").items()},\n    \"gdp\": {str(k): v for k, v in gdp.to_dict(orient=\"index\").items()},\n    \"fed_assets\": {str(k): v for k, v in fed_assets.to_dict(orient=\"index\").items()},\n    \"household_debt\": {str(k): v for k, v in hdebt.to_dict(orient=\"index\").items()},\n    \"msci\": {str(k): v for k, v in msci.to_dict(orient=\"index\").items()},\n    \"us_equities\": {str(k): v for k, v in stock_data.to_dict(orient=\"index\").items()},\n    \"sp500_pe\": {str(k): v for k, v in pe.to_dict(orient=\"index\").items()},\n    \"vix\": {str(k): v for k, v in vix.to_dict(orient=\"index\").items()},\n    \"us_recessions\": {str(k): v for k, v in recessions.to_dict(orient=\"index\").items()},\n    \"fed_target_rate\": {str(k): v for k, v in fedTargetRateChange.to_dict(orient=\"index\").items()},\n    \"us_yields\": {str(k): v for k, v in usYields_monthly.to_dict(orient=\"index\").items()}\n}\n\n```\n\n\n\n```{python}\n#| echo: false\n\nimport json\ntoday = today = date.today().strftime(\"%B %d, %Y\")\n\n\n# --- BUILD THE PROMPT ---\n# Use an f-string to inject both JSON strings into your prompt template.\nprompt = f\"\"\"\nFirst, provide a brief, up-to-date summary of the global financial markets covering the last three months up to today, {today}. When writing the summary, pay attention to indicators and trends that could suggest similarities to past U.S. market cycles. Focus on global equities, major stock indices, and global yields. When providing figures, prioritize the most recent month and year-to-date figures, if available. Limit the global summary to 3â€“5 sentences. The majority of the report should focus on the U.S. growth stock market.\n\nThen, adopting the persona of a US growth-stock investor, use that summary as context for a deeper analysis of the U.S. market. Base your analysis *only* on the data provided in the JSON object below. In your analysis, please:\n\n- Compare the current U.S. market and macroeconomic data to historical periods using the datasets provided (inflation, unemployment, GDP, FED balance sheet, household debt, equity indices, P/E ratios, VIX, yields, and recession indicators). Identify patterns, correlations, or cycles that resemble today.\n- For each resemblance to past \"boom and bust\" periods, briefly explain why this similarity is relevant to current U.S. growth stocks. Where possible, quantify the similarity (e.g., \"Current 2Y/10Y yield spread of X% is similar to Y% in 2000\").\n- Provide at least 2 specific risks and 2 specific opportunities for U.S. growth investors, directly linking each to the patterns identified above.\n\nData provided:\n- inflation: Inflation, YoY\n- unemployment: Unemployment rate\n- gdp: Gross Domestic Product, GDP, YoY\n- fed_assets: FED Balance Sheet (Assets)\n- household_debt: Household debt servicing\n- msci: MSCI World Equity Index. Monthly, but the last value represents the most recent day\n- us_equities: Major U.S. stock indices (SP500: SP500, NDX: Nasdaq 100, DJI: Dow Jones). Monthly, but the last value represents the most recent day\n- sp500_pe: SP 500 P/E ratio, Monthly, but the last value represents the most recent day\n- vix: VIX cboe volatility index\n- us_recessions: Past U.S. recessions, 1: there was a recession at the corresponding date\n- fed_target_rate: Federal Funds Target Range - Upper Limit, Percent, Daily. It tells what the upper limit is, and what was the change on a specific day.\n- us_yields: (DGS2: U.S. 2Y and DGS10: U.S. 10Y yields.\n\n\n{json.dumps(all_data, indent=2)}\n\nYou are writing this to growth (stock) investors, but sound natural as an individual writing a research report or blog. Write in smooth paragraphs for narrative flow. Only use bullet points for risks, opportunities, or portfolio recommendations. Assume the reader is financially literate; do not define basic terms. Do not start with of course, as an investment research analyst etc. Provide enough information as detailed. Use one main title at the beginning which is catchy and describing the situation as of today, {today}. Do not use titles and subtitles, but you can use bullet points as you see fit. Use standard markdown format. Do not say this/that dataset etc.\n\nInclude charts only where they meaningfully support the discussion. Do not place charts in the introduction. You may use multiple charts per major section if they add value, but avoid placing charts in consecutive paragraphs. Use chart placeholders exactly as listed in the library below. Do not repeat the same chart within a section. Prioritize charts that strengthen the key points and insights.\n\nChart placeholders must be used only from the provided placeholder library and must be written in the exact format [CHART: Description of Chart].\n\nChart Placeholder Library:\n- [CHART: US Inflation Rate (YoY)]\n- [CHART: US Inflation Rate CPI and PCE (YoY)]\n- [CHART: US Unemployment Rate]\n- [CHART: US GDP Growth Rate (YoY)]\n- [CHART: Federal Reserve Total Assets]\n- [CHART: Household Debt Service Payments]\n- [CHART: MSCI World Equity Index]\n- [CHART: Performance of Major US Stock Indices]\n- [CHART: S&P 500 PE Ratio]\n- [CHART: Cboe Volatility Index (VIX)]\n- [CHART: US Recession Indicator]\n- [CHART: Federal Funds Target Rate (Upper Limit)]\n- [CHART: US 2Y and 10Y Treasury Yields and Spread]\n\n\nFinally, based on your complete analysis, conclude with a suggested portfolio exposure for US growth stocks (e.g., 0-25%, 25-50%, 50-75%, 75-100%). Briefly justify your reasoning.\n\"\"\"\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\nfrom openai import OpenAI\n\nclient = OpenAI()\n\n# Reliable financial/economic domains\ntrusted_domains = [\n    \"reuters.com\",\n    \"bloomberg.com\",\n    \"ft.com\",\n    \"wsj.com\",\n    \"federalreserve.gov\",\n    \"ecb.europa.eu\",\n    \"bis.org\",\n    \"imf.org\",\n    \"worldbank.org\",\n    \"oecd.org\",\n    \"sec.gov\",\n    \"spglobal.com\",\n    \"msci.com\",\n    \"morningstar.com\",\n    \"nasdaq.com\",\n    \"nyse.com\"\n]\n\nresponse = client.responses.create(\n    model=\"gpt-5\",   # or \"gbt-5\" \"gpt-4.1\" if GPT-5 isnâ€™t enabled in your account yet\n    tools=[{\n            \"type\": \"web_search\",\n            \"filters\": {\n              \"allowed_domains\": trusted_domains\n            }\n          }],\n    input=[\n        {\"role\": \"user\", \"content\": prompt}\n    ],\n)\n\nai_response_gbt5 = response.output_text\n\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n#| \nfrom google import genai\nfrom google.genai import types\n\n# The client gets the API key from the environment variable `GEMINI_API_KEY`.\nclient = genai.Client()\n\ngrounding_tool = types.Tool(\n    google_search=types.GoogleSearch()\n)\n\nconfig = types.GenerateContentConfig(\n    tools=[grounding_tool]\n)\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.5-pro\", \n    contents=prompt,\n    config=config,\n)\nai_response_gemini25 = response.text\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| include: false\n\n# MSCI World Equity Index\n\n# 1. Create the plot AND capture the Axes object in the 'ax' variable\nax = msci.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# 2. Move the y-axis ticks and label to the right side\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# 2. ADD THIS LINE: Customize the grid\nax.grid(True, linestyle='--', color='lightgrey', linewidth=0.5)\n\n# 3. Hide the top and left spines\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/MSCI World Equity Index.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# Set titles and labels\n# plt.show()\n\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| include: false\n\nax = stock_data[stock_data.index.year > 1986].plot(linewidth=0.5)\n# Set titles and labels\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Performance of Major US Stock Indices.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n\n```\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport matplotlib.dates as mdates\nimport numpy as np\n\n# --- 1. SETUP: Create Sample Data ---\n# This sample data matches the structure of your FRED data.\n# Replace this section with your actual 'usYields' DataFrame.\n\n# --- 2. Filter the Data (like in ggplot) ---\nplot_data = usYields[usYields.index >= \"2020-01-01\"]\nplot_data[\"SR-LR\"] = plot_data[\"DGS2\"] - plot_data[\"DGS10\"]\n\n# --- 3. Create and Customize the Plot ---\n\n# Create a figure and an axes object\nfig, ax = plt.subplots()\nfig.set_facecolor('#f5f5f5') # Set figure background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# Define the exact colors from your ggplot code\ncolors = {\n    \"2Y Yield\": \"#bee0ff\", \n    \"10Y Yield\": \"#0612f2\",  \n    \"SR-LR\": \"#D3D3D3\"\n}\n\n# Plot each line with specific colors, labels, and line widths\nax.plot(plot_data.index, plot_data['DGS2'], color=colors[\"2Y Yield\"], linewidth=1, label='2Y Yield')\nax.plot(plot_data.index, plot_data['DGS10'], color=colors[\"10Y Yield\"], linewidth=1, label='10Y Yield')\nax.plot(plot_data.index, plot_data['SR-LR'], color=colors[\"SR-LR\"], linewidth=1, label='SR-LR')\n\n# Add the horizontal dashed line at y=0\nax.axhline(y=0, color='#D3D3D3', linestyle='--', linewidth=1.0)\n\n# --- 4. FORMAT THE PLOT to match the theme ---\n# --- ADDITIONS FOR MID-YEAR GRIDLINES ---\n# 1. Set the location of minor ticks to be every 6 months\nax.xaxis.set_minor_locator(mdates.MonthLocator(bymonth=7))\n\n# 2. Turn on the grid for the minor ticks and style them\nax.grid(True, which='minor', axis='x', linestyle='dotted', color='grey', linewidth=0.2)\n# --- END ADDITIONS ---\n\n# Customize the grid to be dotted\nax.grid(True, which='major', axis='y', linestyle='dotted', color='grey', linewidth=0.2)\nax.grid(True, which='major', axis='x', linestyle='dotted', color='grey', linewidth=0.2)\n\n# Move the Y-axis to the right side and format as percentage\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(mticker.PercentFormatter(xmax=100.0, decimals=1))\nax.set_ylim(-2, 6)\n\n# Format the X-axis to show years\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.tick_params(axis='x', labelsize=8)\nax.tick_params(axis='y', labelsize=8)\n\n# --- ADD THIS LINE TO STYLE THE X-AXIS AND Y-AXIS TICKS ---\nax.tick_params(axis='x', which='major', direction='in', color='black', length=6, labelsize=8)\nax.tick_params(axis='y', which='major', direction='in', color='black', length=6, labelsize=8)\n\n# Remove the plot frame lines (spines)\nax.spines[['top', 'left', 'bottom']].set_visible(False)\n\nax.spines['right'].set_visible(True)\nax.spines['right'].set_color('black')\nax.spines['right'].set_linewidth(0.75)\n\n# Add titles and caption, positioned to match ggplot's style\n# plt.rcParams['font.family'] = 'Inter' # Set font family if available\n# fig.suptitle('Short vs long rates', x=0.09, y=0.98, ha='left', fontsize=16, fontweight='bold')\n# ax.set_title('10Y yield little changed from Mar level', loc='left', fontsize=12, pad=10)\nfig.text(0.01, 0.04, 'Data source: FRED', ha='left', fontsize=7, fontweight='bold')\n\n# Customize the legend to match ggplot's style\nax.legend(loc='upper left', frameon=False, ncol=3)\n\n# --- MODIFIED LEGEND CODE ---\n# Add columnspacing=1.0 to reduce the space between legend items\nax.legend(loc='upper left', frameon=False, ncol=3, columnspacing=0.8)\n# -----------------------------\n\nfig.subplots_adjust(left=0.08, right=0.92, top=0.9, bottom=0.2)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US 2Y and 10Y Treasury Yields and Spread.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n# plt.show()\n\n# To save the figure with the exact dimensions\n# fig.savefig('my_700x350_plot.png', dpi=dpi) # \n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# INFLATION\n\nplot_data = inflation.tail(13) \n\ndef custom_date_formatter(x, pos):\n    dt = mdates.num2date(x)  # convert number to datetime\n    if dt.month == 1:  # show year only in January\n        return dt.strftime(\"%b\\n%Y\")\n    else:\n        return dt.strftime(\"%b\")\n\n\n\n# --- Plot ---\nfig, ax = plt.subplots()\nbars = ax.bar(plot_data.index.to_timestamp(), plot_data['cpi'], color=\"royalblue\", width=20)\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# Add value labels above bars\nfor bar, val in zip(bars, plot_data['cpi']):\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,\n            f\"{val:.1f}\", ha=\"center\", va=\"bottom\", fontsize=9)\n\n# --- Title & subtitle ---\n# plt.suptitle(\"CPI: 2.4% YoY (vs. 2.8% in Feb)\",\n#              fontsize=16, fontweight=\"bold\", x=0.01, ha=\"left\")\n# plt.title(\"Core CPI: 2.8% YoY, the lowest level since 2011\",\n#           fontsize=12, loc=\"left\")\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\n# --- Format x-axis (monthly ticks, rotated) ---\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n#ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%b\\n%Y\"))\nax.xaxis.set_major_formatter(FuncFormatter(custom_date_formatter))\nplt.xticks(rotation=0)\nax.set_xlim(plot_data.index.to_timestamp().min() - pd.Timedelta(days=15),\n            plot_data.index.to_timestamp().max() + pd.Timedelta(days=15))\n\n\n# --- Format y-axis ---\nax.set_ylim(0, 5)\nax.set_ylabel(\"%\", fontsize=10)\nax.yaxis.set_major_formatter(lambda x, pos: f\"{x:.1f}%\")\n\n# --- Gridlines ---\nax.grid(True, axis=\"y\", linestyle=\"--\", alpha=0.5)\nax.grid(False, axis=\"x\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"right\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\n# --- Data source note ---\nplt.figtext(0.01, -0.02, \"Data source: BLS\", ha=\"left\", fontsize=9, fontweight=\"bold\")\n\n# plt.tight_layout()\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Inflation Rate (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n# plt.show()\n\n```\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Inflation, cpi and core_cpi\n\nplot_data = inflation[inflation.index >= \"2020-01-01\"]\n\nax = plot_data.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# Add gridlines\nax.grid(which='major', linestyle='--', linewidth=0.7)\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Inflation Rate CPI and PCE (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# UNEMPLOYMENT\n\nplot_data = unemployment[unemployment.index >= \"2020-01-01\"]\n\nax = plot_data.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# Add gridlines\nax.grid(which='major', linestyle='--', linewidth=0.7)\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Unemployment Rate.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# GDP\n\nplot_data = gdp.tail(12)\n\nax = plot_data.plot(kind='bar')\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# Get the container from the existing plot\nbar_container = ax.containers[0]\n\n# Add bar labels\nax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US GDP Growth Rate (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Federal Reserve Total Assets\n\nax = fed_assets.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nformatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\nax.yaxis.set_major_formatter(formatter)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Federal Reserve Total Assets.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Household Debt Service Payments\n\nax = hdebt.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\n# ax.yaxis.set_major_formatter(formatter)\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\n\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Household Debt Service Payments.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# S&P 500 P/E Ratio\n\nax = pe.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/S&P 500 PE Ratio.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Cboe Volatility Index (VIX)\n\nax = vix.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Cboe Volatility Index (VIX).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Federal Funds Target Rate (Upper Limit)\n\nax = fedTargetRate.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# # Add bar labels\n# ax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\n# ax.yaxis.set_major_formatter(formatter)\n\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\n# ax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Federal Funds Target Rate (Upper Limit).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# US Recession Indicator\n\nax = recessions.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# # Add bar labels\n# ax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Recession Indicator.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n# OPEANAI GBT-5\n```{python}\n#| echo: false\n#| output: 'asis'\n\n### AUTOMATION OF CHART PLACEMENT\n\nimport re\n# The base path to your charts folder\nbase_path = \"charts/\"\n\n# The dictionary mapping the placeholder description to the full file path of each chart\nCHART_FILENAME_LIBRARY = {\n    \"US Inflation Rate (YoY)\": base_path + \"US Inflation Rate (YoY).png\",\n    \"US Inflation Rate CPI and PCE (YoY)\": base_path + \"US Inflation Rate CPI and PCE (YoY).png\",\n    \"US Unemployment Rate\": base_path + \"US Unemployment Rate.png\",\n    \"US GDP Growth Rate (YoY)\": base_path + \"US GDP Growth Rate (YoY).png\",\n    \"Federal Reserve Total Assets\": base_path + \"Federal Reserve Total Assets.png\",\n    \"Household Debt Service Payments\": base_path + \"Household Debt Service Payments.png\",\n    \"MSCI World Equity Index\": base_path + \"MSCI World Equity Index.png\",\n    \"Performance of Major US Stock Indices\": base_path + \"Performance of Major US Stock Indices.png\",\n    \"S&P 500 PE Ratio\": base_path + \"S&P 500 PE Ratio.png\",\n    \"Cboe Volatility Index (VIX)\": base_path + \"Cboe Volatility Index (VIX).png\",\n    \"US Recession Indicator\": base_path + \"US Recession Indicator.png\",\n    \"Federal Funds Target Rate (Upper Limit)\": base_path + \"Federal Funds Target Rate (Upper Limit).png\",\n    \"US 2Y and 10Y Treasury Yields and Spread\": base_path + \"US 2Y and 10Y Treasury Yields and Spread.png\"\n}\n\n# The text from the Gemini API\nai_response_text = ai_response_gbt5\n\nsegments = re.split(r'(\\[CHART:.*?\\])', ai_response_text)\n\nfor segment in segments:\n    if segment.startswith('[CHART:'):\n        chart_description = segment[7:-1].strip()\n        \n        # Look up the filename in your new library\n        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)\n        \n        if chart_filename:\n            # Print the markdown image tag using the found filename\n            print(f\"\\n![{chart_description}]({chart_filename})\\n\")\n        else:\n            print(f\"\\n_Warning: Chart '{chart_description}' not found in library._\\n\")\n            \n    else:\n        # This is a normal text segment, so just print it\n        print(segment, end=\"\")\n```\n\n\n# GEMINI 2.5-Pro\n```{python}\n#| echo: false\n#| output: 'asis'\n\n### AUTOMATION OF CHART PLACEMENT\n\nimport re\n# The base path to your charts folder\nbase_path = \"charts/\"\n\n# The dictionary mapping the placeholder description to the full file path of each chart\nCHART_FILENAME_LIBRARY = {\n    \"US Inflation Rate (YoY)\": base_path + \"US Inflation Rate (YoY).png\",\n    \"US Inflation Rate CPI and PCE (YoY)\": base_path + \"US Inflation Rate CPI and PCE (YoY).png\",\n    \"US Unemployment Rate\": base_path + \"US Unemployment Rate.png\",\n    \"US GDP Growth Rate (YoY)\": base_path + \"US GDP Growth Rate (YoY).png\",\n    \"Federal Reserve Total Assets\": base_path + \"Federal Reserve Total Assets.png\",\n    \"Household Debt Service Payments\": base_path + \"Household Debt Service Payments.png\",\n    \"MSCI World Equity Index\": base_path + \"MSCI World Equity Index.png\",\n    \"Performance of Major US Stock Indices\": base_path + \"Performance of Major US Stock Indices.png\",\n    \"S&P 500 PE Ratio\": base_path + \"S&P 500 PE Ratio.png\",\n    \"Cboe Volatility Index (VIX)\": base_path + \"Cboe Volatility Index (VIX).png\",\n    \"US Recession Indicator\": base_path + \"US Recession Indicator.png\",\n    \"Federal Funds Target Rate (Upper Limit)\": base_path + \"Federal Funds Target Rate (Upper Limit).png\",\n    \"US 2Y and 10Y Treasury Yields and Spread\": base_path + \"US 2Y and 10Y Treasury Yields and Spread.png\"\n}\n\n# The text from the Gemini API\nai_response_text = ai_response_gemini25\n\nsegments = re.split(r'(\\[CHART:.*?\\])', ai_response_text)\n\nfor segment in segments:\n    if segment.startswith('[CHART:'):\n        chart_description = segment[7:-1].strip()\n        \n        # Look up the filename in your new library\n        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)\n        \n        if chart_filename:\n            # Print the markdown image tag using the found filename\n            print(f\"\\n![{chart_description}]({chart_filename})\\n\")\n        else:\n            print(f\"\\n_Warning: Chart '{chart_description}' not found in library._\\n\")\n            \n    else:\n        # This is a normal text segment, so just print it\n        print(segment, end=\"\")\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n\n# import datetime\n\n# # --- 1. Generate the dynamic date string ---\n# today = datetime.date.today()\n# day = today.day\n\n# if 1 <= day <= 10:\n#     part_of_month = \"early\"\n# elif 11 <= day <= 20:\n#     part_of_month = \"mid\"\n# else:\n#     part_of_month = \"late\"\n\n# # Format the final string (e.g., \"late September 2025\")\n# date_string = f\"as of {part_of_month} {today.strftime('%B %Y')}\"\n\n\n# # --- 2. Build your prompt using the dynamic date ---\n# prompt = f\"\"\"\n# Using your web search capabilities, identify 10 US growth stocks that are currently trending in financial news and analyst reports {date_string}.\n\n# For each stock, provide:\n# 1. The company name and ticker symbol.\n# 2. A brief, one-sentence summary of why it is considered a trending growth stock.\n# 3. Please cite your sources.\n\n# Use only one title \"Trending Stocks\".\n\n# Present all results in a markdown table with columns: Company Name, Ticker Symbol, Summary. Include a header row. Do not use any other format such as plain lists or paragraphs.\n# Use bold for company names, plain text for ticker symbols, and concise sentences for the summary. Keep the summary column clear and readable.\n\n# \"\"\"\n\n# # Now the 'prompt' variable is ready to be sent to the Gemini API\n# #print(prompt) # Uncomment to see the final prompt\n\n# from google import genai\n# from google.genai import types\n\n# # The client gets the API key from the environment variable `GEMINI_API_KEY`.\n# client = genai.Client()\n\n# grounding_tool = types.Tool(\n#     google_search=types.GoogleSearch()\n# )\n\n# config = types.GenerateContentConfig(\n#     tools=[grounding_tool]\n# )\n\n# response = client.models.generate_content(\n#     model=\"gemini-2.5-pro\", \n#     contents=prompt,\n#     config=config,\n# )\n# print(response.text)\n\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n#| \n# from google import genai\n# from google.genai import types\n\n# # The client gets the API key from the environment variable `GEMINI_API_KEY`.\n# client = genai.Client()\n\n# grounding_tool = types.Tool(\n#     google_search=types.GoogleSearch()\n# )\n\n# config = types.GenerateContentConfig(\n#     tools=[grounding_tool]\n# )\n\n# response = client.models.generate_content(\n#     model=\"gemini-2.5-pro\", \n#     contents=f\"\"\"\n#     1. Make a summary of the latest inflation report from BLS. Also make a commentary of what the current inflation reading may mean for a growth-stock investor.\n#     2.  Make a summary of the latest GDP report from BAE. Also make a commentary of what the current inflation reading may mean for a growth-stock investor.\n\n#     Do not start like this e.g., Washington D.C. - ... start with text directly.\n#     \"\"\",\n#     config=config,\n# )\n# print(response.text)\n```\n\n","srcMarkdownNoYaml":"\n\n```{python}\n#| echo: false\n#| include: false\n# import libraries\nimport pandas_datareader.data as web\nimport pandas as pd\nimport yfinance as yf\nfrom datetime import date\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mticker\nfrom matplotlib.ticker import FuncFormatter, PercentFormatter, MultipleLocator\n```\n\n```{python}\n#| echo: false\n#| include: false\n# IMPORT ALL DATA SETS\n\n# MSCI World Equity Index\nmsci = yf.download(\"^990100-USD-STRD\", start=\"1900-01-01\", interval=\"1mo\", auto_adjust=True)['Close']\nmsci.rename(columns={\"^990100-USD-STRD\":\"msci\"}, inplace=True)\nmsci.index = msci.index.to_period('M')\n\n\n#### Inflation\n# monthly YoY US inflation\n# https://fred.stlouisfed.org/series/CPIAUCSL\n# https://tradingeconomics.com/united-states/inflation-cpi\n\ninflation = web.get_data_fred([\"CPIAUCSL\", \"CPILFESL\"], start=\"1900-01-01\")\ninflation.rename(columns= {\"CPIAUCSL\":\"cpi\", \"CPILFESL\":\"core_cpi\"}, inplace=True)\ninflation = inflation.pct_change(12)*100\ninflation = inflation.round(1)\ninflation.index = inflation.index.to_period('M')\n\n\n# GDP (Real)\n# https://fred.stlouisfed.org/series/GDPC1\n    # compounded annual rate of change: [t/t(-1)]^4 -1  \n# https://www.bea.gov/data/gdp/gross-domestic-product\n\ngdp = web.get_data_fred(\"GDPC1\", start=\"1900-01-01\")\ngdp.rename(columns= {\"GDPC1\":\"gdp\"}, inplace=True)\n\ngdp = ((gdp / gdp.shift(1))**4 - 1)*100\ngdp.dropna(inplace=True)\ngdp.index = gdp.index.to_period('Q')\ngdp = gdp.round(1)\n\n# Household debt\n#  Household Debt Service Payments as a Percent of Disposable Personal Income (TDSP)\n#  Seasonally adjusted\nhdebt = web.get_data_fred(\"TDSP\", start = \"1900-01-01\")\nhdebt.index = hdebt.index.to_period('Q')\n\n\n# UNEMPLOYMENT\n# https://fred.stlouisfed.org/series/UNRATE\nunemployment = web.get_data_fred(\"UNRATE\", start = \"1900-01-01\")\nunemployment.index = unemployment.index.to_period('M')\n\n\n# FED B/S Assets\n# https://fred.stlouisfed.org/series/WALCL#\n# frequency monthly, aggregation method: Average\n\n# Download WALCL directly from FRED\nfed_assets = web.get_data_fred(\"WALCL\", start=\"1900-01-01\")\nfed_assets = fed_assets.resample('M').mean()\n\nfed_assets.index = fed_assets.index.to_period('M')\n\n# SP500, Nasdaq 100, Dow Jones  \ntickers = [\"^GSPC\", \"^NDX\", \"^DJI\"]\nstock_data = yf.download(tickers, start=\"1900-01-01\", interval=\"1mo\", auto_adjust=True)['Close']\nstock_data.index = stock_data.index.to_period('M').to_timestamp('M') # the last index value should ideally be adjusted to today or some last business day\nstock_data.rename(columns= {\"^GSPC\":\"SP500\",\n                                \"^NDX\":\"NDX\",\n                                \"^DJI\": \"DJI\"}, inplace=True)\n\n\n# SP500 P/E Ratio\ndef fetch_multpl_pe_by_month():\n    url = \"https://www.multpl.com/s-p-500-pe-ratio/table/by-month\"\n    tables = pd.read_html(url)\n    df = tables[0]\n    df.columns = [\"date\", \"pe\"]\n    \n    # Clean PE column: remove non-numeric characters\n    df[\"pe\"] = df[\"pe\"].astype(str).str.replace(r\"[^0-9\\.\\-]\", \"\", regex=True)\n    df[\"pe\"] = pd.to_numeric(df[\"pe\"], errors=\"coerce\")\n    \n    # Convert Date to datetime\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df[\"YearMonth\"] = df[\"date\"].dt.to_period(\"M\")\n    df = df.sort_values(\"date\").drop_duplicates(\"YearMonth\", keep=\"last\")\n    \n    # Drop helper column\n    df = df.drop(columns=[\"YearMonth\"]).reset_index(drop=True)\n    \n    \n    return df\n\npe = fetch_multpl_pe_by_month()\n\npe = pe.set_index(\"date\")\npe.index = pe.index.to_period('M')\n\n# VIX: CBOE volatility index\nvix = yf.download(\"^VIX\", start=\"1900-01-01\", interval=\"1d\", auto_adjust=True)['Close']\nvix = vix.resample('M').mean()\nvix.index = vix.index.to_period('M')\nvix.rename(columns= {\"^VIX\":\"VIX\"}, inplace=True)\n\n# FED TARGET RATE\n# https://fred.stlouisfed.org/series/DFEDTARU\nfedTargetRate = web.get_data_fred('DFEDTARU', start=\"2008-12-16\")\nfedTargetRate.rename(columns={'DFEDTARU':'fed_target_rate'}, inplace=True)\nfedTargetRate['change'] = fedTargetRate['fed_target_rate'].diff()\nfedTargetRate.dropna(inplace=True)\nfedTargetRateChange = fedTargetRate[fedTargetRate['change'] != 0]\n\n\n# US 2Y vs 10Y yields\n# Get 2Y and 10Y Treasury Yields from FRED\nusYields = web.get_data_fred([\"DGS2\", \"DGS10\"], start=\"1976-06-01\")\nusYields = usYields.dropna()\n\nusYields_monthly = usYields.resample('M').mean()\n\n# usYields[\"SR-LR\"] = usYields[\"DGS2\"] - usYields[\"DGS10\"]\n\nusYields_monthly.index = usYields_monthly.index.to_period('M')\n# usYields_monthly[\"SR-LR\"] = usYields_monthly[\"DGS2\"] - usYields_monthly[\"DGS10\"]\n\n\n# U.S. Recessions\n# https://fred.stlouisfed.org/series/JHDUSRGDPBR\nrecessions = web.get_data_fred(\"JHDUSRGDPBR\", start=\"1900-01-01\")\nrecessions.rename(columns={\"JHDUSRGDPBR\": \"recession\"}, inplace=True)\nrecessions.index = recessions.index.to_period('Q')\n\n# Convert each dataframe to its own JSON string\n# orient='records' creates a clean list of objects\n# indent=2 adds nice formatting for readability\n# monthly_msci_json = monthly_msci.to_json(orient='records', indent=2)\n# inflation_json = inflation.to_json(orient='records', indent=2)\n# gdp_json = gdp.to_json(orient='records', indent=2)\n# stock_data_monthly_json = stock_data_monthly.to_json(orient='records', indent=2)\n# fed_assets_json = fed_assets.to_json(orient='records', indent=2)\n# hdebt_json = hdebt.to_json(orient='records', indent=2)\n\n# we convert the index when creating dictionary\nall_data = {\n    \"inflation\": {str(k): v for k, v in inflation.to_dict(orient=\"index\").items()},\n    \"unemployment\": {str(k): v for k, v in unemployment.to_dict(orient=\"index\").items()},\n    \"gdp\": {str(k): v for k, v in gdp.to_dict(orient=\"index\").items()},\n    \"fed_assets\": {str(k): v for k, v in fed_assets.to_dict(orient=\"index\").items()},\n    \"household_debt\": {str(k): v for k, v in hdebt.to_dict(orient=\"index\").items()},\n    \"msci\": {str(k): v for k, v in msci.to_dict(orient=\"index\").items()},\n    \"us_equities\": {str(k): v for k, v in stock_data.to_dict(orient=\"index\").items()},\n    \"sp500_pe\": {str(k): v for k, v in pe.to_dict(orient=\"index\").items()},\n    \"vix\": {str(k): v for k, v in vix.to_dict(orient=\"index\").items()},\n    \"us_recessions\": {str(k): v for k, v in recessions.to_dict(orient=\"index\").items()},\n    \"fed_target_rate\": {str(k): v for k, v in fedTargetRateChange.to_dict(orient=\"index\").items()},\n    \"us_yields\": {str(k): v for k, v in usYields_monthly.to_dict(orient=\"index\").items()}\n}\n\n```\n\n\n\n```{python}\n#| echo: false\n\nimport json\ntoday = today = date.today().strftime(\"%B %d, %Y\")\n\n\n# --- BUILD THE PROMPT ---\n# Use an f-string to inject both JSON strings into your prompt template.\nprompt = f\"\"\"\nFirst, provide a brief, up-to-date summary of the global financial markets covering the last three months up to today, {today}. When writing the summary, pay attention to indicators and trends that could suggest similarities to past U.S. market cycles. Focus on global equities, major stock indices, and global yields. When providing figures, prioritize the most recent month and year-to-date figures, if available. Limit the global summary to 3â€“5 sentences. The majority of the report should focus on the U.S. growth stock market.\n\nThen, adopting the persona of a US growth-stock investor, use that summary as context for a deeper analysis of the U.S. market. Base your analysis *only* on the data provided in the JSON object below. In your analysis, please:\n\n- Compare the current U.S. market and macroeconomic data to historical periods using the datasets provided (inflation, unemployment, GDP, FED balance sheet, household debt, equity indices, P/E ratios, VIX, yields, and recession indicators). Identify patterns, correlations, or cycles that resemble today.\n- For each resemblance to past \"boom and bust\" periods, briefly explain why this similarity is relevant to current U.S. growth stocks. Where possible, quantify the similarity (e.g., \"Current 2Y/10Y yield spread of X% is similar to Y% in 2000\").\n- Provide at least 2 specific risks and 2 specific opportunities for U.S. growth investors, directly linking each to the patterns identified above.\n\nData provided:\n- inflation: Inflation, YoY\n- unemployment: Unemployment rate\n- gdp: Gross Domestic Product, GDP, YoY\n- fed_assets: FED Balance Sheet (Assets)\n- household_debt: Household debt servicing\n- msci: MSCI World Equity Index. Monthly, but the last value represents the most recent day\n- us_equities: Major U.S. stock indices (SP500: SP500, NDX: Nasdaq 100, DJI: Dow Jones). Monthly, but the last value represents the most recent day\n- sp500_pe: SP 500 P/E ratio, Monthly, but the last value represents the most recent day\n- vix: VIX cboe volatility index\n- us_recessions: Past U.S. recessions, 1: there was a recession at the corresponding date\n- fed_target_rate: Federal Funds Target Range - Upper Limit, Percent, Daily. It tells what the upper limit is, and what was the change on a specific day.\n- us_yields: (DGS2: U.S. 2Y and DGS10: U.S. 10Y yields.\n\n\n{json.dumps(all_data, indent=2)}\n\nYou are writing this to growth (stock) investors, but sound natural as an individual writing a research report or blog. Write in smooth paragraphs for narrative flow. Only use bullet points for risks, opportunities, or portfolio recommendations. Assume the reader is financially literate; do not define basic terms. Do not start with of course, as an investment research analyst etc. Provide enough information as detailed. Use one main title at the beginning which is catchy and describing the situation as of today, {today}. Do not use titles and subtitles, but you can use bullet points as you see fit. Use standard markdown format. Do not say this/that dataset etc.\n\nInclude charts only where they meaningfully support the discussion. Do not place charts in the introduction. You may use multiple charts per major section if they add value, but avoid placing charts in consecutive paragraphs. Use chart placeholders exactly as listed in the library below. Do not repeat the same chart within a section. Prioritize charts that strengthen the key points and insights.\n\nChart placeholders must be used only from the provided placeholder library and must be written in the exact format [CHART: Description of Chart].\n\nChart Placeholder Library:\n- [CHART: US Inflation Rate (YoY)]\n- [CHART: US Inflation Rate CPI and PCE (YoY)]\n- [CHART: US Unemployment Rate]\n- [CHART: US GDP Growth Rate (YoY)]\n- [CHART: Federal Reserve Total Assets]\n- [CHART: Household Debt Service Payments]\n- [CHART: MSCI World Equity Index]\n- [CHART: Performance of Major US Stock Indices]\n- [CHART: S&P 500 PE Ratio]\n- [CHART: Cboe Volatility Index (VIX)]\n- [CHART: US Recession Indicator]\n- [CHART: Federal Funds Target Rate (Upper Limit)]\n- [CHART: US 2Y and 10Y Treasury Yields and Spread]\n\n\nFinally, based on your complete analysis, conclude with a suggested portfolio exposure for US growth stocks (e.g., 0-25%, 25-50%, 50-75%, 75-100%). Briefly justify your reasoning.\n\"\"\"\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\nfrom openai import OpenAI\n\nclient = OpenAI()\n\n# Reliable financial/economic domains\ntrusted_domains = [\n    \"reuters.com\",\n    \"bloomberg.com\",\n    \"ft.com\",\n    \"wsj.com\",\n    \"federalreserve.gov\",\n    \"ecb.europa.eu\",\n    \"bis.org\",\n    \"imf.org\",\n    \"worldbank.org\",\n    \"oecd.org\",\n    \"sec.gov\",\n    \"spglobal.com\",\n    \"msci.com\",\n    \"morningstar.com\",\n    \"nasdaq.com\",\n    \"nyse.com\"\n]\n\nresponse = client.responses.create(\n    model=\"gpt-5\",   # or \"gbt-5\" \"gpt-4.1\" if GPT-5 isnâ€™t enabled in your account yet\n    tools=[{\n            \"type\": \"web_search\",\n            \"filters\": {\n              \"allowed_domains\": trusted_domains\n            }\n          }],\n    input=[\n        {\"role\": \"user\", \"content\": prompt}\n    ],\n)\n\nai_response_gbt5 = response.output_text\n\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n#| \nfrom google import genai\nfrom google.genai import types\n\n# The client gets the API key from the environment variable `GEMINI_API_KEY`.\nclient = genai.Client()\n\ngrounding_tool = types.Tool(\n    google_search=types.GoogleSearch()\n)\n\nconfig = types.GenerateContentConfig(\n    tools=[grounding_tool]\n)\n\nresponse = client.models.generate_content(\n    model=\"gemini-2.5-pro\", \n    contents=prompt,\n    config=config,\n)\nai_response_gemini25 = response.text\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| include: false\n\n# MSCI World Equity Index\n\n# 1. Create the plot AND capture the Axes object in the 'ax' variable\nax = msci.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# 2. Move the y-axis ticks and label to the right side\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# 2. ADD THIS LINE: Customize the grid\nax.grid(True, linestyle='--', color='lightgrey', linewidth=0.5)\n\n# 3. Hide the top and left spines\nax.spines['top'].set_visible(False)\nax.spines['left'].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/MSCI World Equity Index.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# Set titles and labels\n# plt.show()\n\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| include: false\n\nax = stock_data[stock_data.index.year > 1986].plot(linewidth=0.5)\n# Set titles and labels\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Performance of Major US Stock Indices.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n\n```\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport matplotlib.dates as mdates\nimport numpy as np\n\n# --- 1. SETUP: Create Sample Data ---\n# This sample data matches the structure of your FRED data.\n# Replace this section with your actual 'usYields' DataFrame.\n\n# --- 2. Filter the Data (like in ggplot) ---\nplot_data = usYields[usYields.index >= \"2020-01-01\"]\nplot_data[\"SR-LR\"] = plot_data[\"DGS2\"] - plot_data[\"DGS10\"]\n\n# --- 3. Create and Customize the Plot ---\n\n# Create a figure and an axes object\nfig, ax = plt.subplots()\nfig.set_facecolor('#f5f5f5') # Set figure background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# Define the exact colors from your ggplot code\ncolors = {\n    \"2Y Yield\": \"#bee0ff\", \n    \"10Y Yield\": \"#0612f2\",  \n    \"SR-LR\": \"#D3D3D3\"\n}\n\n# Plot each line with specific colors, labels, and line widths\nax.plot(plot_data.index, plot_data['DGS2'], color=colors[\"2Y Yield\"], linewidth=1, label='2Y Yield')\nax.plot(plot_data.index, plot_data['DGS10'], color=colors[\"10Y Yield\"], linewidth=1, label='10Y Yield')\nax.plot(plot_data.index, plot_data['SR-LR'], color=colors[\"SR-LR\"], linewidth=1, label='SR-LR')\n\n# Add the horizontal dashed line at y=0\nax.axhline(y=0, color='#D3D3D3', linestyle='--', linewidth=1.0)\n\n# --- 4. FORMAT THE PLOT to match the theme ---\n# --- ADDITIONS FOR MID-YEAR GRIDLINES ---\n# 1. Set the location of minor ticks to be every 6 months\nax.xaxis.set_minor_locator(mdates.MonthLocator(bymonth=7))\n\n# 2. Turn on the grid for the minor ticks and style them\nax.grid(True, which='minor', axis='x', linestyle='dotted', color='grey', linewidth=0.2)\n# --- END ADDITIONS ---\n\n# Customize the grid to be dotted\nax.grid(True, which='major', axis='y', linestyle='dotted', color='grey', linewidth=0.2)\nax.grid(True, which='major', axis='x', linestyle='dotted', color='grey', linewidth=0.2)\n\n# Move the Y-axis to the right side and format as percentage\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(mticker.PercentFormatter(xmax=100.0, decimals=1))\nax.set_ylim(-2, 6)\n\n# Format the X-axis to show years\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.tick_params(axis='x', labelsize=8)\nax.tick_params(axis='y', labelsize=8)\n\n# --- ADD THIS LINE TO STYLE THE X-AXIS AND Y-AXIS TICKS ---\nax.tick_params(axis='x', which='major', direction='in', color='black', length=6, labelsize=8)\nax.tick_params(axis='y', which='major', direction='in', color='black', length=6, labelsize=8)\n\n# Remove the plot frame lines (spines)\nax.spines[['top', 'left', 'bottom']].set_visible(False)\n\nax.spines['right'].set_visible(True)\nax.spines['right'].set_color('black')\nax.spines['right'].set_linewidth(0.75)\n\n# Add titles and caption, positioned to match ggplot's style\n# plt.rcParams['font.family'] = 'Inter' # Set font family if available\n# fig.suptitle('Short vs long rates', x=0.09, y=0.98, ha='left', fontsize=16, fontweight='bold')\n# ax.set_title('10Y yield little changed from Mar level', loc='left', fontsize=12, pad=10)\nfig.text(0.01, 0.04, 'Data source: FRED', ha='left', fontsize=7, fontweight='bold')\n\n# Customize the legend to match ggplot's style\nax.legend(loc='upper left', frameon=False, ncol=3)\n\n# --- MODIFIED LEGEND CODE ---\n# Add columnspacing=1.0 to reduce the space between legend items\nax.legend(loc='upper left', frameon=False, ncol=3, columnspacing=0.8)\n# -----------------------------\n\nfig.subplots_adjust(left=0.08, right=0.92, top=0.9, bottom=0.2)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US 2Y and 10Y Treasury Yields and Spread.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n# plt.show()\n\n# To save the figure with the exact dimensions\n# fig.savefig('my_700x350_plot.png', dpi=dpi) # \n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# INFLATION\n\nplot_data = inflation.tail(13) \n\ndef custom_date_formatter(x, pos):\n    dt = mdates.num2date(x)  # convert number to datetime\n    if dt.month == 1:  # show year only in January\n        return dt.strftime(\"%b\\n%Y\")\n    else:\n        return dt.strftime(\"%b\")\n\n\n\n# --- Plot ---\nfig, ax = plt.subplots()\nbars = ax.bar(plot_data.index.to_timestamp(), plot_data['cpi'], color=\"royalblue\", width=20)\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# Add value labels above bars\nfor bar, val in zip(bars, plot_data['cpi']):\n    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.05,\n            f\"{val:.1f}\", ha=\"center\", va=\"bottom\", fontsize=9)\n\n# --- Title & subtitle ---\n# plt.suptitle(\"CPI: 2.4% YoY (vs. 2.8% in Feb)\",\n#              fontsize=16, fontweight=\"bold\", x=0.01, ha=\"left\")\n# plt.title(\"Core CPI: 2.8% YoY, the lowest level since 2011\",\n#           fontsize=12, loc=\"left\")\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\n# --- Format x-axis (monthly ticks, rotated) ---\nax.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n#ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%b\\n%Y\"))\nax.xaxis.set_major_formatter(FuncFormatter(custom_date_formatter))\nplt.xticks(rotation=0)\nax.set_xlim(plot_data.index.to_timestamp().min() - pd.Timedelta(days=15),\n            plot_data.index.to_timestamp().max() + pd.Timedelta(days=15))\n\n\n# --- Format y-axis ---\nax.set_ylim(0, 5)\nax.set_ylabel(\"%\", fontsize=10)\nax.yaxis.set_major_formatter(lambda x, pos: f\"{x:.1f}%\")\n\n# --- Gridlines ---\nax.grid(True, axis=\"y\", linestyle=\"--\", alpha=0.5)\nax.grid(False, axis=\"x\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"right\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\n# --- Data source note ---\nplt.figtext(0.01, -0.02, \"Data source: BLS\", ha=\"left\", fontsize=9, fontweight=\"bold\")\n\n# plt.tight_layout()\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Inflation Rate (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n# plt.show()\n\n```\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Inflation, cpi and core_cpi\n\nplot_data = inflation[inflation.index >= \"2020-01-01\"]\n\nax = plot_data.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.set_label_position(\"right\")\nax.yaxis.tick_right()\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# Add gridlines\nax.grid(which='major', linestyle='--', linewidth=0.7)\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Inflation Rate CPI and PCE (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# UNEMPLOYMENT\n\nplot_data = unemployment[unemployment.index >= \"2020-01-01\"]\n\nax = plot_data.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# Add gridlines\nax.grid(which='major', linestyle='--', linewidth=0.7)\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Unemployment Rate.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# GDP\n\nplot_data = gdp.tail(12)\n\nax = plot_data.plot(kind='bar')\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# Get the container from the existing plot\nbar_container = ax.containers[0]\n\n# Add bar labels\nax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\nax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\", \"right\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US GDP Growth Rate (YoY).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Federal Reserve Total Assets\n\nax = fed_assets.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\nformatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\nax.yaxis.set_major_formatter(formatter)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Federal Reserve Total Assets.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Household Debt Service Payments\n\nax = hdebt.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\n# ax.yaxis.set_major_formatter(formatter)\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\n\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Household Debt Service Payments.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# S&P 500 P/E Ratio\n\nax = pe.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/S&P 500 PE Ratio.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Cboe Volatility Index (VIX)\n\nax = vix.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Cboe Volatility Index (VIX).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# Federal Funds Target Rate (Upper Limit)\n\nax = fedTargetRate.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# # Add bar labels\n# ax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')\n# ax.yaxis.set_major_formatter(formatter)\n\n\nax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%\n# ax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps\n# ax.set_ylim(1, 5)  # adjust to your data range\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/Federal Funds Target Rate (Upper Limit).png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n\n\n```{python}\n#| echo: false\n#| fig-align: center\n#| fig-width: 7\n#| fig-height: 3.5\n#| fig-dpi: 100\n#| include: false\n\n# US Recession Indicator\n\nax = recessions.plot()\n\n# setting figure background and plot background color\nax.set_facecolor('#f5f5f5')  # Set plot background color\n\n# To access the figure:\nfig = ax.get_figure()\nfig.patch.set_facecolor(\"#f5f5f5\")  # figure background\n\n# # Get the container from the existing plot\n# bar_container = ax.containers[0]\n\n# # Add bar labels\n# ax.bar_label(bar_container)\n\n\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# --- Remove top/right spines ---\nfor spine in [\"top\", \"left\"]:\n    ax.spines[spine].set_visible(False)\n\nplt.savefig(\n    'C:/Users/Mehmet/OneDrive/Investment/Market Research/charts/US Recession Indicator.png', # Filename and extension\n    dpi=300,             # Dots per inch for high resolution\n    bbox_inches='tight'  # Trims extra whitespace\n)\n\n# plt.show()\n```\n\n# OPEANAI GBT-5\n```{python}\n#| echo: false\n#| output: 'asis'\n\n### AUTOMATION OF CHART PLACEMENT\n\nimport re\n# The base path to your charts folder\nbase_path = \"charts/\"\n\n# The dictionary mapping the placeholder description to the full file path of each chart\nCHART_FILENAME_LIBRARY = {\n    \"US Inflation Rate (YoY)\": base_path + \"US Inflation Rate (YoY).png\",\n    \"US Inflation Rate CPI and PCE (YoY)\": base_path + \"US Inflation Rate CPI and PCE (YoY).png\",\n    \"US Unemployment Rate\": base_path + \"US Unemployment Rate.png\",\n    \"US GDP Growth Rate (YoY)\": base_path + \"US GDP Growth Rate (YoY).png\",\n    \"Federal Reserve Total Assets\": base_path + \"Federal Reserve Total Assets.png\",\n    \"Household Debt Service Payments\": base_path + \"Household Debt Service Payments.png\",\n    \"MSCI World Equity Index\": base_path + \"MSCI World Equity Index.png\",\n    \"Performance of Major US Stock Indices\": base_path + \"Performance of Major US Stock Indices.png\",\n    \"S&P 500 PE Ratio\": base_path + \"S&P 500 PE Ratio.png\",\n    \"Cboe Volatility Index (VIX)\": base_path + \"Cboe Volatility Index (VIX).png\",\n    \"US Recession Indicator\": base_path + \"US Recession Indicator.png\",\n    \"Federal Funds Target Rate (Upper Limit)\": base_path + \"Federal Funds Target Rate (Upper Limit).png\",\n    \"US 2Y and 10Y Treasury Yields and Spread\": base_path + \"US 2Y and 10Y Treasury Yields and Spread.png\"\n}\n\n# The text from the Gemini API\nai_response_text = ai_response_gbt5\n\nsegments = re.split(r'(\\[CHART:.*?\\])', ai_response_text)\n\nfor segment in segments:\n    if segment.startswith('[CHART:'):\n        chart_description = segment[7:-1].strip()\n        \n        # Look up the filename in your new library\n        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)\n        \n        if chart_filename:\n            # Print the markdown image tag using the found filename\n            print(f\"\\n![{chart_description}]({chart_filename})\\n\")\n        else:\n            print(f\"\\n_Warning: Chart '{chart_description}' not found in library._\\n\")\n            \n    else:\n        # This is a normal text segment, so just print it\n        print(segment, end=\"\")\n```\n\n\n# GEMINI 2.5-Pro\n```{python}\n#| echo: false\n#| output: 'asis'\n\n### AUTOMATION OF CHART PLACEMENT\n\nimport re\n# The base path to your charts folder\nbase_path = \"charts/\"\n\n# The dictionary mapping the placeholder description to the full file path of each chart\nCHART_FILENAME_LIBRARY = {\n    \"US Inflation Rate (YoY)\": base_path + \"US Inflation Rate (YoY).png\",\n    \"US Inflation Rate CPI and PCE (YoY)\": base_path + \"US Inflation Rate CPI and PCE (YoY).png\",\n    \"US Unemployment Rate\": base_path + \"US Unemployment Rate.png\",\n    \"US GDP Growth Rate (YoY)\": base_path + \"US GDP Growth Rate (YoY).png\",\n    \"Federal Reserve Total Assets\": base_path + \"Federal Reserve Total Assets.png\",\n    \"Household Debt Service Payments\": base_path + \"Household Debt Service Payments.png\",\n    \"MSCI World Equity Index\": base_path + \"MSCI World Equity Index.png\",\n    \"Performance of Major US Stock Indices\": base_path + \"Performance of Major US Stock Indices.png\",\n    \"S&P 500 PE Ratio\": base_path + \"S&P 500 PE Ratio.png\",\n    \"Cboe Volatility Index (VIX)\": base_path + \"Cboe Volatility Index (VIX).png\",\n    \"US Recession Indicator\": base_path + \"US Recession Indicator.png\",\n    \"Federal Funds Target Rate (Upper Limit)\": base_path + \"Federal Funds Target Rate (Upper Limit).png\",\n    \"US 2Y and 10Y Treasury Yields and Spread\": base_path + \"US 2Y and 10Y Treasury Yields and Spread.png\"\n}\n\n# The text from the Gemini API\nai_response_text = ai_response_gemini25\n\nsegments = re.split(r'(\\[CHART:.*?\\])', ai_response_text)\n\nfor segment in segments:\n    if segment.startswith('[CHART:'):\n        chart_description = segment[7:-1].strip()\n        \n        # Look up the filename in your new library\n        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)\n        \n        if chart_filename:\n            # Print the markdown image tag using the found filename\n            print(f\"\\n![{chart_description}]({chart_filename})\\n\")\n        else:\n            print(f\"\\n_Warning: Chart '{chart_description}' not found in library._\\n\")\n            \n    else:\n        # This is a normal text segment, so just print it\n        print(segment, end=\"\")\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n\n# import datetime\n\n# # --- 1. Generate the dynamic date string ---\n# today = datetime.date.today()\n# day = today.day\n\n# if 1 <= day <= 10:\n#     part_of_month = \"early\"\n# elif 11 <= day <= 20:\n#     part_of_month = \"mid\"\n# else:\n#     part_of_month = \"late\"\n\n# # Format the final string (e.g., \"late September 2025\")\n# date_string = f\"as of {part_of_month} {today.strftime('%B %Y')}\"\n\n\n# # --- 2. Build your prompt using the dynamic date ---\n# prompt = f\"\"\"\n# Using your web search capabilities, identify 10 US growth stocks that are currently trending in financial news and analyst reports {date_string}.\n\n# For each stock, provide:\n# 1. The company name and ticker symbol.\n# 2. A brief, one-sentence summary of why it is considered a trending growth stock.\n# 3. Please cite your sources.\n\n# Use only one title \"Trending Stocks\".\n\n# Present all results in a markdown table with columns: Company Name, Ticker Symbol, Summary. Include a header row. Do not use any other format such as plain lists or paragraphs.\n# Use bold for company names, plain text for ticker symbols, and concise sentences for the summary. Keep the summary column clear and readable.\n\n# \"\"\"\n\n# # Now the 'prompt' variable is ready to be sent to the Gemini API\n# #print(prompt) # Uncomment to see the final prompt\n\n# from google import genai\n# from google.genai import types\n\n# # The client gets the API key from the environment variable `GEMINI_API_KEY`.\n# client = genai.Client()\n\n# grounding_tool = types.Tool(\n#     google_search=types.GoogleSearch()\n# )\n\n# config = types.GenerateContentConfig(\n#     tools=[grounding_tool]\n# )\n\n# response = client.models.generate_content(\n#     model=\"gemini-2.5-pro\", \n#     contents=prompt,\n#     config=config,\n# )\n# print(response.text)\n\n```\n\n\n```{python}\n#| echo: false\n#| output: 'asis'\n#| cache: true\n#| \n# from google import genai\n# from google.genai import types\n\n# # The client gets the API key from the environment variable `GEMINI_API_KEY`.\n# client = genai.Client()\n\n# grounding_tool = types.Tool(\n#     google_search=types.GoogleSearch()\n# )\n\n# config = types.GenerateContentConfig(\n#     tools=[grounding_tool]\n# )\n\n# response = client.models.generate_content(\n#     model=\"gemini-2.5-pro\", \n#     contents=f\"\"\"\n#     1. Make a summary of the latest inflation report from BLS. Also make a commentary of what the current inflation reading may mean for a growth-stock investor.\n#     2.  Make a summary of the latest GDP report from BAE. Also make a commentary of what the current inflation reading may mean for a growth-stock investor.\n\n#     Do not start like this e.g., Washington D.C. - ... start with text directly.\n#     \"\"\",\n#     config=config,\n# )\n# print(response.text)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"market-research.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.24","theme":["cosmo"],"title":"Market Research"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}