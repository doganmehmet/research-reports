---
title: "Market Research"
format: html
---

```{python}
#| echo: false
#| include: false
"""
Library Imports
---------------
This cell imports all necessary libraries for:
- Data fetching: pandas_datareader (FRED API), yfinance (Yahoo Finance)
- Data manipulation: pandas
- Visualization: matplotlib with various formatting utilities
- Date handling: datetime
"""

# Data fetching libraries
import pandas_datareader.data as web  # FRED economic data
import pandas as pd                    # Data manipulation
import numpy as np
import yfinance as yf                  # Stock market data
from datetime import date              # Current date for report timestamp

# Visualization libraries
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as mticker
from matplotlib.ticker import FuncFormatter, PercentFormatter, MultipleLocator
```

```{python}
#| echo: false
#| include: false
"""
Data Fetching and Preparation
------------------------------
This cell fetches all financial and economic data from various sources:
- FRED (Federal Reserve Economic Data): Inflation, GDP, unemployment, Fed data, yields, etc.
- Yahoo Finance: Stock indices, VIX, commodities (gold, oil)
- Multpl.com: S&P 500 P/E ratios

All time series are converted to pandas Period indices (monthly 'M' or quarterly 'Q')
for consistent date handling and eventual JSON serialization.
"""

# ============================================================================
# EQUITY INDICES
# ============================================================================

# MSCI World Equity Index
# Ticker: ^990100-USD-STRD (Yahoo Finance)
# Frequency: Monthly, Close prices, auto-adjusted for splits/dividends
msci = yf.download("^990100-USD-STRD", start="1900-01-01", interval="1mo", auto_adjust=True)['Close']
msci.rename(columns={"^990100-USD-STRD":"msci"}, inplace=True)
msci.index = msci.index.to_period('M')  # Convert to period index for consistency
msci = msci.round(4)     

# ============================================================================
# MACROECONOMIC INDICATORS
# ============================================================================

# INFLATION (CPI)
# Source: FRED - Consumer Price Index for All Urban Consumers (CPIAUCSL)
# Source: FRED - Consumer Price Index for All Urban Consumers: All Items Less Food and Energy (CPILFESL - Core CPI)
# Links: https://fred.stlouisfed.org/series/CPIAUCSL
#        https://tradingeconomics.com/united-states/inflation-cpi
# Calculation: Year-over-year percentage change (current month vs. 12 months ago)
inflation = web.get_data_fred(["CPIAUCSL", "CPILFESL"], start="1900-01-01")
inflation.rename(columns= {"CPIAUCSL":"cpi", "CPILFESL":"core_cpi"}, inplace=True)
inflation = inflation.pct_change(12) * 100  # YoY % change: (current/12 months ago - 1) * 100
inflation = inflation.round(1)              # Round to 1 decimal place
inflation.index = inflation.index.to_period('M')


# GDP (REAL GROSS DOMESTIC PRODUCT)
# Source: FRED - Real Gross Domestic Product (GDPC1)
# Links: https://fred.stlouisfed.org/series/GDPC1
#        https://www.bea.gov/data/gdp/gross-domestic-product
# Calculation: Compounded annual rate of change: [t/t(-1)]^4 - 1
# Note: FRED provides quarterly data; we annualize the quarter-over-quarter growth
gdp = web.get_data_fred("GDPC1", start="1900-01-01")
gdp.rename(columns= {"GDPC1":"gdp"}, inplace=True)
# Annualize quarterly growth: compound QoQ growth rate raised to power 4
gdp = ((gdp / gdp.shift(1))**4 - 1) * 100  # Convert to percentage
gdp.dropna(inplace=True)                   # Remove NaN from first row
gdp.index = gdp.index.to_period('Q')       # Convert to quarterly period index
gdp = gdp.round(1)                         # Round to 1 decimal place

# HOUSEHOLD DEBT SERVICE RATIO
# Source: FRED - Household Debt Service Payments as a Percent of Disposable Personal Income (TDSP)
# Link: https://fred.stlouisfed.org/series/TDSP
# Note: Seasonally adjusted, quarterly frequency
# Measures: % of disposable income used for debt payments (mortgages, consumer debt, etc.)
hdebt = web.get_data_fred("TDSP", start = "1900-01-01")
hdebt.index = hdebt.index.to_period('Q')  # Convert to quarterly period index
hdebt.rename(columns= {"TDSP":"household_debt"}, inplace=True)
hdebt = hdebt.round(4)

# UNEMPLOYMENT RATE
# Source: FRED - Unemployment Rate (UNRATE)
# Link: https://fred.stlouisfed.org/series/UNRATE
# Note: Seasonally adjusted, monthly frequency
# Measures: % of labor force that is unemployed and actively seeking employment
unemployment = web.get_data_fred("UNRATE", start = "1900-01-01")
unemployment.index = unemployment.index.to_period('M')  # Convert to monthly period index
unemployment.rename(columns= {"UNRATE":"unemployment_rate"}, inplace=True)

# FEDERAL RESERVE BALANCE SHEET (TOTAL ASSETS)
# Source: FRED - All Federal Reserve Banks: Total Assets (WALCL)
# Link: https://fred.stlouisfed.org/series/WALCL
# Note: Weekly data aggregated to monthly using mean
# Measures: Total assets held by the Federal Reserve (in millions of dollars)
# Important indicator of monetary policy and quantitative easing
fed_assets = web.get_data_fred("WALCL", start="1900-01-01")
fed_assets = fed_assets.resample('M').mean()  # Aggregate weekly to monthly (average)
fed_assets.index = fed_assets.index.to_period('M')  # Convert to monthly period index
fed_assets.rename(columns= {"WALCL":"fed_assets"}, inplace=True)
fed_assets = fed_assets.round(4)

# US MAJOR STOCK INDICES
# Source: Yahoo Finance
# Tickers:
#   ^GSPC - S&P 500 Index
#   ^NDX  - NASDAQ 100 Index
#   ^DJI  - Dow Jones Industrial Average
# Note: Monthly closing prices, auto-adjusted for splits and dividends
# Index kept as timestamp (not period) for returns calculation later
tickers = ["^GSPC", "^NDX", "^DJI"]
stock_data = yf.download(tickers, start="1900-01-01", interval="1mo", auto_adjust=True)['Close']
# Convert to period then back to timestamp at end of month for flexibility
stock_data.index = stock_data.index.to_period('M').to_timestamp('M')  # Last value represents most recent day
stock_data.rename(columns= {"^GSPC":"SP500",
                            "^NDX":"NDX",
                            "^DJI": "DJI"}, inplace=True)


stock_data = stock_data.round(4)


# S&P 500 PRICE-TO-EARNINGS RATIO
# Source: Multpl.com (scrapes Robert Shiller's data)
# Link: https://www.multpl.com/s-p-500-pe-ratio/table/by-month
# Note: Monthly P/E ratios based on trailing 12-month earnings
def fetch_multpl_pe_by_month():
    """
    Fetch S&P 500 P/E ratio data from Multpl.com.

    Returns:
        pd.DataFrame: DataFrame with date index and 'pe' column

    Process:
        1. Scrape HTML table from Multpl.com
        2. Clean P/E values (remove non-numeric characters)
        3. Convert to monthly period index
        4. Remove duplicate months (keep last value if multiple entries)
    """
    url = "https://www.multpl.com/s-p-500-pe-ratio/table/by-month"
    tables = pd.read_html(url)  # Parse HTML tables
    df = tables[0]              # Get first table
    df.columns = ["date", "pe"]

    # Clean PE column: remove non-numeric characters (e.g., 'est' suffix)
    df["pe"] = df["pe"].astype(str).str.replace(r"[^0-9\.\-]", "", regex=True)
    df["pe"] = pd.to_numeric(df["pe"], errors="coerce")  # Convert to numeric, NaN for errors

    # Convert Date to datetime
    df["date"] = pd.to_datetime(df["date"])
    df["YearMonth"] = df["date"].dt.to_period("M")  # Create period column for deduplication
    df = df.sort_values("date").drop_duplicates("YearMonth", keep="last")  # Keep latest value per month

    # Drop helper column
    df = df.drop(columns=["YearMonth"]).reset_index(drop=True)

    return df

# Execute function and prepare data
pe = fetch_multpl_pe_by_month()
pe = pe.set_index("date")
pe.index = pe.index.to_period('M')  # Convert to monthly period index

# ============================================================================
# MARKET VOLATILITY AND RISK INDICATORS
# ============================================================================

# VIX (CBOE VOLATILITY INDEX)
# Source: Yahoo Finance, ticker ^VIX
# Note: Daily data aggregated to monthly using mean
# Measures: Expected 30-day volatility of S&P 500 (fear gauge)
# Higher VIX = higher expected volatility = higher market uncertainty
vix = yf.download("^VIX", start="1900-01-01", interval="1d", auto_adjust=True)['Close']
vix.rename(columns= {"^VIX":"VIX"}, inplace=True)
last_vix_value = vix.iloc[-1]['VIX'] # this is to be used in the graph
vix = vix.resample('M').mean()  # Average daily VIX values for each month
vix.index = vix.index.to_period('M')
# Replace the last value with the actual last value instead of monthly average
vix.values[-1] = last_vix_value
vix = vix.round(4)


# ============================================================================
# FEDERAL RESERVE POLICY INDICATORS
# ============================================================================

# FEDERAL FUNDS TARGET RATE (UPPER LIMIT)
# Source: FRED - Federal Funds Target Range - Upper Limit (DFEDTARU)
# Link: https://fred.stlouisfed.org/series/DFEDTARU
# Note: Daily data, starting from Dec 16, 2008 (when Fed adopted target range)
# We filter to keep only dates where the rate changed (not every day)
fedTargetRate = web.get_data_fred('DFEDTARU', start="2008-12-16")
fedTargetRate.rename(columns={'DFEDTARU':'fed_target_rate'}, inplace=True)
fedTargetRate['change'] = fedTargetRate['fed_target_rate'].diff()  # Calculate day-to-day change
fedTargetRate.dropna(inplace=True)  # Remove first row (NaN from diff)
fedTargetRateChange = fedTargetRate[fedTargetRate['change'] != 0]  # Keep only dates with rate changes

# ============================================================================
# FIXED INCOME / TREASURY YIELDS
# ============================================================================

# US TREASURY YIELDS (2-YEAR AND 10-YEAR)
# Source: FRED
#   DGS2  - 2-Year Treasury Constant Maturity Rate
#   DGS10 - 10-Year Treasury Constant Maturity Rate
# Note: Daily data aggregated to monthly using mean
# The spread (2Y - 10Y) is an important recession indicator (inverted yield curve)
usYields = web.get_data_fred(["DGS2", "DGS10"], start="1976-06-01")
usYields = usYields.dropna()  # Remove days with missing data
usYields_monthly = usYields.resample('M').mean()  # Average daily yields for each month
usYields_monthly.index = usYields_monthly.index.to_period('M')
# Note: SR-LR spread can be calculated in chart code: usYields_monthly["SR-LR"] = usYields_monthly["DGS2"] - usYields_monthly["DGS10"]
usYields_monthly = usYields_monthly.round(4)


# ============================================================================
# RECESSION INDICATORS
# ============================================================================

# U.S. PAST RECESSIONS (HISTORICAL PERIODS)
# Source: FRED - Hamilton Recession Indicator Based on GDP (JHDUSRGDPBR)
# Link: https://fred.stlouisfed.org/series/JHDUSRGDPBR
# Note: Quarterly data, value = 1 during recession periods, 0 otherwise
recessions = web.get_data_fred("JHDUSRGDPBR", start="1900-01-01")
recessions.rename(columns={"JHDUSRGDPBR": "recession"}, inplace=True)
recessions.index = recessions.index.to_period('Q')

# ============================================================================
# CREDIT RISK INDICATORS
# ============================================================================

# ICE BOFA US HIGH YIELD INDEX OPTION-ADJUSTED SPREAD
# Source: FRED - ICE BofA US High Yield Index Option-Adjusted Spread (BAMLH0A0HYM2)
# Link: https://fred.stlouisfed.org/series/BAMLH0A0HYM2
# Note: Daily data aggregated to monthly using last value
# Measures: Spread between high-yield corporate bonds and Treasury curve
# Wider spreads = higher perceived credit risk / financial stress
option_adjusted_spread = web.get_data_fred("BAMLH0A0HYM2", start="1900-01-01")
option_adjusted_spread = option_adjusted_spread.resample("M").last()  # Use last value of month
option_adjusted_spread.index = option_adjusted_spread.index.to_period('M')
option_adjusted_spread.rename(columns={'BAMLH0A0HYM2':'spread'}, inplace=True)

# ============================================================================
# COMMODITIES (SAFE HAVEN & ENERGY)
# ============================================================================

# GOLD PRICES
# Source: Yahoo Finance, ticker GC=F (Gold Futures)
# Note: Monthly closing prices
# Gold is a traditional safe-haven asset during market turbulence
gold = yf.download("GC=F", start="1900-01-01", interval="1mo", auto_adjust=True)['Close']
gold.index = gold.index.to_period('M')
gold.rename(columns= {"GC=F":"gold"}, inplace=True)
gold = gold.round(4)

# BRENT CRUDE OIL PRICES
# Source: Yahoo Finance, ticker BZ=F (Brent Crude Futures)
# Note: Monthly closing prices
# Oil prices reflect global economic activity and energy market conditions
brent = yf.download("BZ=F", start="1900-01-01", interval="1mo", auto_adjust=True)['Close']
brent.index = brent.index.to_period('M')
brent.rename(columns= {"BZ=F":"brent"}, inplace=True)
brent = brent.round(4)
```



```{python}
#| echo: false
# ============================================================================
# DATA AGGREGATION FOR AI ANALYSIS
# ============================================================================
# Combine all time series data into a single dictionary for JSON serialization
# and AI model consumption.
#
# IMPORTANT: Period indices must be converted to strings for JSON compatibility
# Format: {str(period): {column: value, ...}, ...}
# Example: {"2024-01": {"cpi": 3.4, "core_cpi": 3.9}, "2024-02": {...}, ...}

def df_to_dict_with_dates(df):
    """Convert DataFrame to dict with dates, handling NaN"""
    df_clean = df.replace({np.nan: None})  # Convert NaN to None
    result = {"dates": [str(idx) for idx in df_clean.index]}
    result.update(df_clean.to_dict(orient="list"))
    return result

all_data = {
    # Macroeconomic indicators
    "inflation": df_to_dict_with_dates(inflation),
    "unemployment": df_to_dict_with_dates(unemployment),
    "gdp": df_to_dict_with_dates(gdp),
    "household_debt": df_to_dict_with_dates(hdebt),
    
    # Federal Reserve data
    "fed_assets": df_to_dict_with_dates(fed_assets),
    "fed_target_rate": df_to_dict_with_dates(fedTargetRateChange),
    
    # Equity markets
    "msci": df_to_dict_with_dates(msci),
    "us_equities": df_to_dict_with_dates(stock_data),
    "sp500_pe": df_to_dict_with_dates(pe),
    
    # Risk and volatility indicators
    "vix": df_to_dict_with_dates(vix),
    "bofa_high_yield_option_adjusted_spread": df_to_dict_with_dates(option_adjusted_spread),
    
    # Fixed income
    "us_yields": df_to_dict_with_dates(usYields_monthly),
    
    # Past US Recessions
    "us_recessions": df_to_dict_with_dates(recessions),
    
    # Commodities
    "gold": df_to_dict_with_dates(gold),
    "brent_oil": df_to_dict_with_dates(brent)
}

```



```{python}
#| echo: false

import json
today = date.today().strftime("%B %d, %Y")

# Define the example as a regular string (not in the f-string)
data_structure_info = """
DATA STRUCTURE:
Each dataset contains a 'dates' array and one or more data series. Example:
{
  "vix": {"dates": ["2024-01-01", ...], "VIX": [14.5, ...]},
  "us_equities": {"dates": ["2024-01-01", ...], "SP500": [4800, ...], "NDX": [16500, ...]}
}

Date formats vary by dataset:
- Daily: YYYY-MM-DD (e.g., "2024-01-15")
- Monthly: YYYY-MM (e.g., "2024-01")
- Quarterly: YYYYQQ (e.g., "2024Q1")
"""


# --- BUILD THE PROMPT ---
# Use an f-string to inject both JSON strings into your prompt template.
prompt = f"""
First, provide a brief, up-to-date summary of the global financial markets covering the last three months up to today, {today}. It can include MSCI, gold, petrol, or any other relevant items. When writing the summary, pay attention to indicators and trends that could suggest similarities to past U.S. market cycles. Focus on global equities, major stock indices, and global yields. When providing figures, prioritize the most recent month and year-to-date figures, if available. Limit the global summary to 3–6 sentences. Tone: Write as an experienced growth investor sharing insights with peers. Be direct and analytical, not promotional. Acknowledge uncertainty where it exists. Avoid phrases like "it's important to note" or "it should be noted that." The majority of the report should focus on the U.S. growth stock market.

Then, adopting the persona of a US growth-stock investor, use that summary as context for a deeper analysis of the U.S. market. Base your analysis *only* on the data provided in the JSON object below. In your analysis, please:

- Compare the current U.S. market and macroeconomic data to historical periods using the datasets provided (inflation, unemployment, GDP, FED balance sheet, household debt, equity indices, P/E ratios, VIX, yields, BofA Option Adjusted Spread, gold, and brent oil prices). Identify patterns, correlations, or cycles that resemble today.
- For each resemblance to past "boom and bust" periods, briefly explain why this similarity is relevant to current U.S. growth stocks. Where possible, quantify the similarity (e.g., "Current 2Y/10Y yield spread of X% is similar to Y% in 2000").
- Provide at least 2 specific risks and 2 specific opportunities for U.S. growth investors, directly linking each to the patterns identified above.

{data_structure_info}

MACROECONOMIC:
- inflation: CPI YoY %
- unemployment: Unemployment rate %
- gdp: GDP growth YoY %
- fed_assets: Federal Reserve balance sheet total assets
- household_debt: Household debt service payments as % of disposable income
- us_recessions: Binary indicator (1 = recession period)

EQUITY MARKETS (monthly data; final value = most recent day):
- msci: MSCI World Index
- us_equities: SP500, Nasdaq 100 (NDX), Dow Jones (DJI)
- sp500_pe: S&P 500 trailing P/E ratio
- vix: CBOE Volatility Index

RATES & CREDIT:
- fed_target_rate: Federal Funds upper limit %, daily (shows rate level and changes)
- us_yields: 2-year (DGS2) and 10-year (DGS10) Treasury yields
- bofa_high_yield_option_adjusted_spread: Spread between high-yield corporate bonds and Treasury curve (higher = more credit stress)

COMMODITIES:
- gold: Gold spot price (USD/oz)
- brent_oil: Brent crude oil price (USD/barrel)


{json.dumps(all_data, indent=2)}

You are writing this to growth (stock) investors, but sound natural as an individual writing a research report or blog. Write in smooth paragraphs for narrative flow. Only use bullet points for risks, opportunities, or portfolio recommendations. Assume the reader is financially literate; do not define basic terms. Do not start with of course, as an investment research analyst etc. Provide enough information as detailed. Use one main title at the beginning which is catchy and describing the situation as of today, {today}. Do not use titles and subtitles, but you can use bullet points as you see fit. Use standard markdown format. Do not say this/that dataset etc.

Include charts only where they meaningfully support the discussion. Do not place charts in the introduction. You may use multiple charts per major section if they add value, but avoid placing charts in consecutive paragraphs. Use chart placeholders exactly as listed in the library below. Do not repeat the same chart within a section. Prioritize charts that strengthen the key points and insights.

Chart placeholders must be used only from the provided placeholder library and must be written in the exact format [CHART: Description of Chart].

Chart Placeholder Library:
- [CHART: US Inflation Rate (YoY)]
- [CHART: US Inflation Rate CPI and PCE (YoY)]
- [CHART: US Unemployment Rate]
- [CHART: US GDP Growth Rate (YoY)]
- [CHART: Federal Reserve Total Assets]
- [CHART: Household Debt Service Payments]
- [CHART: MSCI World Equity Index]
- [CHART: Performance of Major US Stock Indices]
- [CHART: S&P 500 PE Ratio]
- [CHART: Cboe Volatility Index (VIX)]
- [CHART: US Past Recessions]
- [CHART: Federal Funds Target Rate (Upper Limit)]
- [CHART: US 2Y and 10Y Treasury Yields and Spread]
- [CHART: ICE BofA Option-Adjusted Spreads]
- [CHART: Gold Prices]
- [CHART: Brent Oil Prices]


Finally, based on your complete analysis, conclude with a suggested portfolio exposure for US growth stocks (e.g., 0-25%, 25-50%, 50-75%, 75-100%). Briefly justify your reasoning.
"""
```


```{python}
#| echo: false
#| output: 'asis'
#| cache: true

import anthropic

client = anthropic.Anthropic()

message = client.messages.create(
    model="claude-sonnet-4-5-20250929",
    max_tokens=8192,
    messages=[
        {
            "role": "user",
            "content": prompt
        }
    ]
)
# ai_response_claude = message.content
ai_response_claude = message.content[0].text
```



```{python}
#| echo: false
#| output: 'asis'
#| cache: true

from openai import OpenAI

client = OpenAI()

# Reliable financial/economic domains
trusted_domains = [
    "reuters.com",
    "bloomberg.com",
    "ft.com",
    "wsj.com",
    "federalreserve.gov",
    "ecb.europa.eu",
    "bis.org",
    "imf.org",
    "worldbank.org",
    "oecd.org",
    "sec.gov",
    "spglobal.com",
    "msci.com",
    "morningstar.com",
    "nasdaq.com",
    "nyse.com"
]

response = client.responses.create(
    model="gpt-5",   # or "gbt-5" "gpt-4.1" if GPT-5 isn’t enabled in your account yet
    tools=[{
            "type": "web_search",
            "filters": {
              "allowed_domains": trusted_domains
            }
          }],
    input=[
        {"role": "user", "content": prompt}
    ],
)

ai_response_gbt5 = response.output_text

```



```{python}
#| echo: false
#| output: 'asis'
#| cache: true
#| 
from google import genai
from google.genai import types

# The client gets the API key from the environment variable `GEMINI_API_KEY`.
client = genai.Client()

grounding_tool = types.Tool(
    google_search=types.GoogleSearch()
)

config = types.GenerateContentConfig(
    tools=[grounding_tool]
)

response = client.models.generate_content(
    model="gemini-2.5-pro", 
    contents=prompt,
    config=config,
)
ai_response_gemini25 = response.text
```



```{python}
#| echo: false
#| include: false

# MSCI World Equity Index

# 1. Create the plot AND capture the Axes object in the 'ax' variable
ax = msci.plot(xlabel='') # color='#0072AA', 

ax.legend(title='') # remove the additional name Ticker in legend

ax.legend(['MSCI World'])

# ----------- Highlight the last data point ---
last_date = msci.index[-1]
last_value = msci.iloc[-1].values[0]  # Get the actual value

# Add text label on the y-axis
ax.text(ax.get_xlim()[1], last_value, f'  {last_value:.1f}', 
        va='center', ha='left', color='#0072AA', fontweight='bold') 
        # ,bbox=dict(boxstyle='round,pad=0.3', facecolor='white', edgecolor='#0612f2', linewidth=1.0) 
# -----------------------------------------------

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# 2. Move the y-axis ticks and label to the right side
ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# 2. ADD THIS LINE: Customize the grid
ax.grid(True, linestyle='--', color='lightgrey', linewidth=0.5)

# 3. Hide the top and left spines
ax.spines['top'].set_visible(False)
ax.spines['left'].set_visible(False)

plt.savefig(
    'charts/MSCI World Equity Index.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# Set titles and labels
# plt.show()

```



```{python}
#| echo: false
#| include: false

# Assuming 'stock_data' is your initial DataFrame with a DatetimeIndex
stock_returns = stock_data.tail(14).pct_change().dropna()
del stock_returns['DJI']

stock_returns.index = stock_returns.index.to_period('M')

ax = stock_returns.plot(kind='bar', legend=True)

ax.legend(title='') # remove the additional name Ticker in legend

# --- NEW: Format x-axis labels to show Month and Year ---
# Get the PeriodIndex from your dataframe
periods = stock_returns.index
new_labels_text = []
prev_year = None

# Loop through each period to create the custom label
for period in periods:
    current_month_name = period.strftime('%b') # e.g., 'Oct'
    current_year = period.year

    # If it's the first item or the year has changed, show "Month\nYear"
    if prev_year is None or current_year != prev_year:
        new_labels_text.append(f"{current_month_name}\n{current_year}")
    # Otherwise, just show "Month"
    else:
        new_labels_text.append(current_month_name)
    
    prev_year = current_year

# Apply the newly created labels to the x-axis
ax.set_xticklabels(new_labels_text, rotation=0, ha='center')
# -----------------------------------------------------------

# Set titles and labels
# (You can add your titles and labels here if you have them)

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.set_label_position("right")
ax.yaxis.tick_right()

# show y-axis values as %s
ax.yaxis.set_major_formatter(PercentFormatter(xmax=1.0, decimals=0))

# setting the last x-axis value to MTD
# This runs AFTER the date formatting to override the last label
labels = ax.get_xticklabels()
new_labels_final = [label.get_text() for label in labels]
if new_labels_final:
    new_labels_final[-1] = 'MTD'
ax.set_xticklabels(new_labels_final)


# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

# Add a horizontal line at y=0 for reference
ax.axhline(0, color='grey', linewidth=0.8, linestyle='--')

plt.xlabel(None) # Remove the default x-axis label
plt.tight_layout() # Adjust layout

plt.savefig(
    'charts/Performance of Major US Stock Indices.png', # Filename and extension
    dpi=300,            # Dots per inch for high resolution
    bbox_inches='tight'   # Trims extra whitespace
)

plt.show() # Display the plot

```

```{python}
#| echo: false
#| include: false

# --- 2. Filter the Data (like in ggplot) ---
plot_data = usYields[usYields.index >= "2020-01-01"]
plot_data["SR-LR"] = plot_data["DGS2"] - plot_data["DGS10"]

# Your existing plot
ax = plot_data.plot(color=['#ff7f0e', '#1f77b4', '#D3D3D3'], linewidth=0.75, xlabel='') # #A4D0A0, #78ADD2

# Add a dashed horizontal line at y=0 (or whatever value you want)
ax.axhline(y=0, color='#D3D3D3', linestyle='--', linewidth=1.0) # , alpha=0.7

ax.legend(['2-Year', '10-Year', '10Y-2Y'])

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background


# # 1. Set the location of minor ticks to be every 6 months
# ax.xaxis.set_minor_locator(mdates.MonthLocator(bymonth=7))

# # 2. Turn on the grid for the minor ticks and style them
ax.grid(True, which='minor', axis='x', linestyle='dotted', color='grey', linewidth=0.2)

# # Customize the grid to be dotted
ax.grid(True, which='major', axis='y', linestyle='dotted', color='grey', linewidth=0.2)
ax.grid(True, which='major', axis='x', linestyle='dotted', color='grey', linewidth=0.2)

# # Move the Y-axis to the right side and format as percentage
ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")
ax.yaxis.set_major_formatter(mticker.PercentFormatter(xmax=100.0, decimals=1))
# ax.set_ylim(-2, 6)

# # Format the X-axis to show years
# ax.xaxis.set_major_locator(mdates.YearLocator())
# ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
# ax.tick_params(axis='x', labelsize=8)
# ax.tick_params(axis='y', labelsize=8)

# # --- ADD THIS LINE TO STYLE THE X-AXIS AND Y-AXIS TICKS ---
# ax.tick_params(axis='x', which='major', direction='in', color='black', length=6, labelsize=8)
# ax.tick_params(axis='y', which='major', direction='in', color='black', length=6, labelsize=8)

# # Remove the plot frame lines (spines)
ax.spines[['top', 'left']].set_visible(False)

# ax.spines['right'].set_visible(True)
# ax.spines['right'].set_color('black')
# ax.spines['right'].set_linewidth(0.75)

# # Add titles and caption, positioned to match ggplot's style
# # plt.rcParams['font.family'] = 'Inter' # Set font family if available
# # fig.suptitle('Short vs long rates', x=0.09, y=0.98, ha='left', fontsize=16, fontweight='bold')
# # ax.set_title('10Y yield little changed from Mar level', loc='left', fontsize=12, pad=10)
fig.text(0.01, 0.00, 'Data source: FRED', ha='left', fontsize=7, fontweight='bold')

# # Customize the legend to match ggplot's style
# ax.legend(loc='upper left', frameon=False, ncol=3)

# # --- MODIFIED LEGEND CODE ---
# # Add columnspacing=1.0 to reduce the space between legend items
# ax.legend(loc='upper left', frameon=False, ncol=3, columnspacing=0.8)
# # -----------------------------

# fig.subplots_adjust(left=0.08, right=0.92, top=0.9, bottom=0.2)

plt.savefig(
    'charts/US 2Y and 10Y Treasury Yields and Spread.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)
# plt.show()

# To save the figure with the exact dimensions 
```



```{python}
#| echo: false
#| include: false

# INFLATION

plot_data = inflation.tail(13)
del plot_data['core_cpi'] 
ax = plot_data.plot(kind='bar')

# --- Format x-axis labels to show Month and Year ---
# Get the PeriodIndex from your dataframe
periods = plot_data.index
new_labels_text = []
prev_year = None

# Loop through each period to create the custom label
for period in periods:
    current_month_name = period.strftime('%b') # e.g., 'Oct'
    current_year = period.year

    # If it's the first item or the year has changed, show "Month\nYear"
    if prev_year is None or current_year != prev_year:
        new_labels_text.append(f"{current_month_name}\n{current_year}")
    # Otherwise, just show "Month"
    else:
        new_labels_text.append(current_month_name)
    
    prev_year = current_year

# Apply the newly created labels to the x-axis
ax.set_xticklabels(new_labels_text, rotation=0, ha='center')
# -----------------------------------------------------------

# Set titles and labels
# (You can add your titles and labels here if you have them)

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.set_label_position("right")
ax.yaxis.tick_right()

# show y-axis values as %s
ax.yaxis.set_major_formatter(PercentFormatter(xmax=100.0, decimals=0))

# setting the last x-axis value to MTD
# This runs AFTER the date formatting to override the last label
labels = ax.get_xticklabels()
new_labels_final = [label.get_text() for label in labels]

ax.set_xticklabels(new_labels_final)


# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

# Add a horizontal line at y=0 for reference
ax.axhline(0, color='grey', linewidth=0.8, linestyle='--')

plt.xlabel(None) # Remove the default x-axis label
plt.tight_layout() # Adjust layout

plt.savefig(
    'charts/US Inflation Rate (YoY).png', # Filename and extension
    dpi=300,            # Dots per inch for high resolution
    bbox_inches='tight'   # Trims extra whitespace
)

plt.show() # Display the plot

```

```{python}
#| echo: false
#| include: false

# Inflation, cpi and core_cpi

plot_data = inflation[inflation.index >= "2020-01-01"]

ax = plot_data.plot(xlabel='') # color='#0612f2'

ax.legend(['CPI', 'Core CPI'])

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.set_label_position("right")
ax.yaxis.tick_right()

ax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%
ax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps
# ax.set_ylim(1, 5)  # adjust to your data range

# Add gridlines
ax.grid(which='major', linestyle='--', linewidth=0.7)

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/US Inflation Rate CPI and PCE (YoY).png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```


```{python}
#| echo: false
#| include: false

# UNEMPLOYMENT
plot_data = unemployment.tail(13)
ax = plot_data.plot(kind='bar', legend=True)

ax.legend(['Unemployment'])

# -------  Add data labels on top of bars ---
for container in ax.containers:
    ax.bar_label(container, padding=3) # , fmt='%.1f%%'
# -------------------------------------------

# --- NEW: Format x-axis labels to show Month and Year ---
# Get the PeriodIndex from your dataframe
periods = plot_data.index
new_labels_text = []
prev_year = None

# Loop through each period to create the custom label
for period in periods:
    current_month_name = period.strftime('%b') # e.g., 'Oct'
    current_year = period.year

    # If it's the first item or the year has changed, show "Month\nYear"
    if prev_year is None or current_year != prev_year:
        new_labels_text.append(f"{current_month_name}\n{current_year}")
    # Otherwise, just show "Month"
    else:
        new_labels_text.append(current_month_name)
    
    prev_year = current_year

# Apply the newly created labels to the x-axis
ax.set_xticklabels(new_labels_text, rotation=0, ha='center')
# -----------------------------------------------------------

# Set titles and labels
# (You can add your titles and labels here if you have them)

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.set_label_position("right")
ax.yaxis.tick_right()

# show y-axis values as %s
ax.yaxis.set_major_formatter(PercentFormatter(xmax=100.0, decimals=0))

ax.set_ylim(1,5)
# setting the last x-axis value to MTD
# This runs AFTER the date formatting to override the last label
labels = ax.get_xticklabels()
new_labels_final = [label.get_text() for label in labels]

ax.set_xticklabels(new_labels_final)


# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

# Add a horizontal line at y=0 for reference
ax.axhline(0, color='grey', linewidth=0.8, linestyle='--')

plt.xlabel(None) # Remove the default x-axis label
plt.tight_layout() # Adjust layout

plt.savefig(
    'charts/US Unemployment Rate.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```



```{python}
#| echo: false
#| include: false

# GDP
plot_data = gdp.tail(12)  # This will now show last 12 quarters

ax = plot_data.plot(kind='bar', legend=True)

ax.legend(['GDP'])

# -------  Add data labels on top of bars ---
for container in ax.containers:
    ax.bar_label(container, padding=3) # , fmt='%.1f%%'
# -------------------------------------------

# --- Format x-axis labels to show Quarter and Year ---
# Get the PeriodIndex from your dataframe
periods = plot_data.index
new_labels_text = []
prev_year = None

# Loop through each period to create the custom label
for period in periods:
    # Get quarter information
    current_quarter = period.quarter  # e.g., 1, 2, 3, 4
    current_year = period.year
    
    # Format as Q1, Q2, Q3, or Q4
    current_quarter_label = f"Q{current_quarter}"
    
    # If it's the first item or the year has changed, show "Q#\nYear"
    if prev_year is None or current_year != prev_year:
        new_labels_text.append(f"{current_quarter_label}\n{current_year}")
    # Otherwise, just show "Q#"
    else:
        new_labels_text.append(current_quarter_label)
    
    prev_year = current_year

# Apply the newly created labels to the x-axis
ax.set_xticklabels(new_labels_text, rotation=0, ha='center')
# -----------------------------------------------------------

# Set titles and labels
# (You can add your titles and labels here if you have them)

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.set_label_position("right")
ax.yaxis.tick_right()

# show y-axis values as %s
ax.yaxis.set_major_formatter(PercentFormatter(xmax=100, decimals=0))

# setting the last x-axis value to MTD
# This runs AFTER the date formatting to override the last label
labels = ax.get_xticklabels()
new_labels_final = [label.get_text() for label in labels]

ax.set_xticklabels(new_labels_final)

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

# Add a horizontal line at y=0 for reference
ax.axhline(0, color='grey', linewidth=0.8, linestyle='--')

plt.xlabel(None) # Remove the default x-axis label
plt.tight_layout() # Adjust layout

plt.savefig(
    'charts/US GDP Growth Rate (YoY).png', # Filename and extension
    dpi=300,            # Dots per inch for high resolution
    bbox_inches='tight'   # Trims extra whitespace
)

plt.show() # Display the plot

```



```{python}
#| echo: false
#| include: false

# Federal Reserve Total Assets
ax = fed_assets.plot(xlabel='')

ax.legend(['Fed Total Assets'])

# --- NEW: Highlight the last data point ---
last_date = fed_assets.index[-1]
last_value = fed_assets.iloc[-1].values[0]  # Get the actual value

# Add a marker at the last point
# ax.plot(last_date, last_value, 'o', color='#0612f2', markersize=8, zorder=5)

# Add a horizontal line from the last point to the y-axis
# ax.axhline(last_value, color='#0612f2', linewidth=1, linestyle='--', alpha=0.5)

# Add text label on the y-axis
ax.text(ax.get_xlim()[1], last_value, f'  {last_value/1e6:.1f}T', 
        va='center', ha='left', color='#0612f2', fontweight='bold') 
        # ,bbox=dict(boxstyle='round,pad=0.3', facecolor='white', edgecolor='#0612f2', linewidth=1.0) 
# -----------------------------------------------

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")
formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')
ax.yaxis.set_major_formatter(formatter)

plt.savefig(
    'charts/Federal Reserve Total Assets.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```



```{python}
#| echo: false
#| include: false

# Household Debt Service Payments

ax = hdebt.plot(xlabel='')

ax.legend(['Household Debt Service Ratio'])

# --- NEW: Highlight the last data point ---
last_date = hdebt.index[-1]
last_value = hdebt.iloc[-1].values[0]  # Get the actual value

# Add text label on the y-axis
ax.text(ax.get_xlim()[1], last_value, f'  {last_value:.1f}%', 
        va='center', ha='left', color='#0612f2', fontweight='bold') 
# -----------------------------------------------

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# # Get the container from the existing plot
# bar_container = ax.containers[0]

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)


ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')
# ax.yaxis.set_major_formatter(formatter)

ax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%


plt.savefig(
    'charts/Household Debt Service Payments.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```


```{python}
#| echo: false
#| include: false

# S&P 500 P/E Ratio

ax = pe.plot(xlabel='')

ax.legend(['S&P 500 P/E'])

# --- NEW: Highlight the last data point ---
last_date = pe.index[-1]
last_value = pe.iloc[-1].values[0]  # Get the actual value

# Add text label on the y-axis
ax.text(ax.get_xlim()[1], last_value, f'  {last_value:.1f}', 
        va='center', ha='left', color='#0612f2', fontweight='bold') 
# -----------------------------------------------

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/S&P 500 PE Ratio.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```



```{python}
#| echo: false
#| include: false

# Cboe Volatility Index (VIX)
ax = vix.plot(xlabel='')

ax.legend(title='') # remove the additional name Ticker in legend
ax.legend(['VIX'])

# --- NEW: Highlight the last data point ---
last_date = vix.index[-1]
last_value = vix.iloc[-1].values[0]  # Get the actual value

# Add text label on the y-axis
ax.text(ax.get_xlim()[1], last_value, f'  {last_value:.1f}', 
        va='center', ha='left', color='#0612f2', fontweight='bold') 

# ax.annotate(f'Current: {last_value:.1f}', 
#             xy=(last_date, last_value),
#             xytext=(10, 5), 
#             textcoords='offset points',
#             fontsize=9,
#             bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))
# -----------------------------------------------

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/Cboe Volatility Index (VIX).png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```



```{python}
#| echo: false
#| include: false

# Federal Funds Target Rate (Upper Limit)

ax = fedTargetRate.plot(xlabel='') # color='#0612f2'

ax.legend(['Fed Funds (Upper)', 'Change'])

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background


ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# formatter = FuncFormatter(lambda x, _: f'{x/1e6:.1f}T')
# ax.yaxis.set_major_formatter(formatter)


ax.yaxis.set_major_formatter(PercentFormatter(xmax=100))  # if values like 2.4 = 2.4%
# ax.yaxis.set_major_locator(MultipleLocator(1))            # 1% steps
# ax.set_ylim(1, 5)  # adjust to your data range

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/Federal Funds Target Rate (Upper Limit).png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```



```{python}
#| echo: false
#| include: false

# US Recession Indicator

ax = recessions.plot(xlabel='')

ax.legend(["Recessions"], loc='upper right')

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# # Get the container from the existing plot
# bar_container = ax.containers[0]

# # Add bar labels
# ax.bar_label(bar_container)


ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/US Past Recessions.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```


```{python}
#| echo: false
#| include: false

# ICE BofA Option-Adjusted Spreads
ax = option_adjusted_spread.plot(xlabel='')

ax.legend(["ICE BofA OAS"])

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# # Get the container from the existing plot
# bar_container = ax.containers[0]

# # Add bar labels
# ax.bar_label(bar_container)

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/ICE BofA Option-Adjusted Spreads.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```


```{python}
#| echo: false
#| include: false

# Gold Prices
ax = gold.plot(xlabel='')

ax.legend(["Gold"], title='') # remove the additional name Ticker in legend


# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

# # Get the container from the existing plot
# bar_container = ax.containers[0]

# # Add bar labels
# ax.bar_label(bar_container)

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/Gold Prices.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```


```{python}
#| echo: false
#| include: false

# Brent Oil Prices
ax = brent.plot(xlabel='')

ax.legend(["Brent"], title='') # remove the additional name Ticker in legend

# setting figure background and plot background color
ax.set_facecolor('#f5f5f5')  # Set plot background color

# To access the figure:
fig = ax.get_figure()
fig.patch.set_facecolor("#f5f5f5")  # figure background

ax.yaxis.tick_right()
ax.yaxis.set_label_position("right")

# --- Remove top/right spines ---
for spine in ["top", "left"]:
    ax.spines[spine].set_visible(False)

plt.savefig(
    'charts/Brent Oil Prices.png', # Filename and extension
    dpi=300,             # Dots per inch for high resolution
    bbox_inches='tight'  # Trims extra whitespace
)

# plt.show()
```

```{python}
#| echo: false
#| include: false

# The base path to your charts folder
base_path = "charts/"

# The dictionary mapping the placeholder description to the full file path of each chart
CHART_FILENAME_LIBRARY = {
    "US Inflation Rate (YoY)": base_path + "US Inflation Rate (YoY).png",
    "US Inflation Rate CPI and PCE (YoY)": base_path + "US Inflation Rate CPI and PCE (YoY).png",
    "US Unemployment Rate": base_path + "US Unemployment Rate.png",
    "US GDP Growth Rate (YoY)": base_path + "US GDP Growth Rate (YoY).png",
    "Federal Reserve Total Assets": base_path + "Federal Reserve Total Assets.png",
    "Household Debt Service Payments": base_path + "Household Debt Service Payments.png",
    "MSCI World Equity Index": base_path + "MSCI World Equity Index.png",
    "Performance of Major US Stock Indices": base_path + "Performance of Major US Stock Indices.png",
    "S&P 500 PE Ratio": base_path + "S&P 500 PE Ratio.png",
    "Cboe Volatility Index (VIX)": base_path + "Cboe Volatility Index (VIX).png",
    "US Past Recessions": base_path + "US Past Recessions.png",
    "Federal Funds Target Rate (Upper Limit)": base_path + "Federal Funds Target Rate (Upper Limit).png",
    "US 2Y and 10Y Treasury Yields and Spread": base_path + "US 2Y and 10Y Treasury Yields and Spread.png",
    "ICE BofA Option-Adjusted Spreads": base_path + "ICE BofA Option-Adjusted Spreads.png",
    "Gold Prices": base_path + "Gold Prices.png",
    "Brent Oil Prices": base_path + "Brent Oil Prices.png"
}

```

# CLAUDE SONNET 4.5
```{python}
#| echo: false
#| output: 'asis'

## AUTOMATION OF CHART PLACEMENT

import re


# The text from the Claude API
ai_response_text = ai_response_claude

segments = re.split(r'(\[CHART:.*?\])', ai_response_text)

for segment in segments:
    if segment.startswith('[CHART:'):
        chart_description = segment[7:-1].strip()
        
        # Look up the filename in your new library
        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)
        
        if chart_filename:
            # Print the markdown image tag using the found filename
            print(f"\n![{chart_description}]({chart_filename})\n")
        else:
            print(f"\n_Warning: Chart '{chart_description}' not found in library._\n")
            
    else:
        # This is a normal text segment, so just print it
        print(segment, end="")
```


# OPEANAI GBT-5
```{python}
#| echo: false
#| output: 'asis'

## AUTOMATION OF CHART PLACEMENT

import re


# The text from the openai API
ai_response_text = ai_response_gbt5

segments = re.split(r'(\[CHART:.*?\])', ai_response_text)

for segment in segments:
    if segment.startswith('[CHART:'):
        chart_description = segment[7:-1].strip()
        
        # Look up the filename in your new library
        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)
        
        if chart_filename:
            # Print the markdown image tag using the found filename
            print(f"\n![{chart_description}]({chart_filename})\n")
        else:
            print(f"\n_Warning: Chart '{chart_description}' not found in library._\n")
            
    else:
        # This is a normal text segment, so just print it
        print(segment, end="")
```


# GEMINI 2.5-Pro
```{python}
#| echo: false
#| output: 'asis'

### AUTOMATION OF CHART PLACEMENT

import re

# The text from the Gemini API
ai_response_text = ai_response_gemini25

segments = re.split(r'(\[CHART:.*?\])', ai_response_text)

for segment in segments:
    if segment.startswith('[CHART:'):
        chart_description = segment[7:-1].strip()
        
        # Look up the filename in your new library
        chart_filename = CHART_FILENAME_LIBRARY.get(chart_description)
        
        if chart_filename:
            # Print the markdown image tag using the found filename
            print(f"\n![{chart_description}]({chart_filename})\n")
        else:
            print(f"\n_Warning: Chart '{chart_description}' not found in library._\n")
            
    else:
        # This is a normal text segment, so just print it
        print(segment, end="")
```

